
Lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080034cc  080034cc  000134cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034ec  080034ec  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080034ec  080034ec  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034ec  080034ec  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034ec  080034ec  000134ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034f0  080034f0  000134f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080034f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000006c  08003560  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003560  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000969d  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aff  00000000  00000000  00029732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002b238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002bc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b71  00000000  00000000  0002c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb0d  00000000  00000000  00043169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082434  00000000  00000000  0004fc76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d20aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002904  00000000  00000000  000d2100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034b4 	.word	0x080034b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080034b4 	.word	0x080034b4

0800014c <isButton1Pressed>:

int TimerForKeyPress= 200;


// check button1
int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000088 	.word	0x20000088

08000170 <isButton2Pressed>:

// check button2
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	2000008c 	.word	0x2000008c

08000194 <isButton3Pressed>:

// check button3
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000090 	.word	0x20000090

080001b8 <subKeyProcess1>:


void subKeyProcess1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag = 1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_TogglePin(SEG0_GPIO_Port, SEG0_Pin);
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000088 	.word	0x20000088

080001d0 <subKeyProcess2>:

void subKeyProcess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_TogglePin(SEG1_GPIO_Port, SEG1_Pin);
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	2000008c 	.word	0x2000008c

080001e8 <subKeyProcess3>:

void subKeyProcess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
	//HAL_GPIO_TogglePin(SEG2_GPIO_Port, SEG2_Pin);
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000090 	.word	0x20000090

08000200 <getKeyInput>:

void getKeyInput(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//button 1
	KeyReg0[0] = KeyReg0[1];
 8000204:	4b5c      	ldr	r3, [pc, #368]	; (8000378 <getKeyInput+0x178>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	4a5b      	ldr	r2, [pc, #364]	; (8000378 <getKeyInput+0x178>)
 800020a:	6013      	str	r3, [r2, #0]
	KeyReg0[1] = KeyReg0[2];
 800020c:	4b5a      	ldr	r3, [pc, #360]	; (8000378 <getKeyInput+0x178>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	4a59      	ldr	r2, [pc, #356]	; (8000378 <getKeyInput+0x178>)
 8000212:	6053      	str	r3, [r2, #4]
	KeyReg0[2] = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4858      	ldr	r0, [pc, #352]	; (800037c <getKeyInput+0x17c>)
 800021a:	f002 f90b 	bl	8002434 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b55      	ldr	r3, [pc, #340]	; (8000378 <getKeyInput+0x178>)
 8000224:	609a      	str	r2, [r3, #8]
	if( (KeyReg0[0] == KeyReg0[1]) && (KeyReg0[1] == KeyReg0[2])){
 8000226:	4b54      	ldr	r3, [pc, #336]	; (8000378 <getKeyInput+0x178>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b53      	ldr	r3, [pc, #332]	; (8000378 <getKeyInput+0x178>)
 800022c:	685b      	ldr	r3, [r3, #4]
 800022e:	429a      	cmp	r2, r3
 8000230:	d125      	bne.n	800027e <getKeyInput+0x7e>
 8000232:	4b51      	ldr	r3, [pc, #324]	; (8000378 <getKeyInput+0x178>)
 8000234:	685a      	ldr	r2, [r3, #4]
 8000236:	4b50      	ldr	r3, [pc, #320]	; (8000378 <getKeyInput+0x178>)
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	429a      	cmp	r2, r3
 800023c:	d11f      	bne.n	800027e <getKeyInput+0x7e>
		if(KeyReg0[3] != KeyReg0[2]){
 800023e:	4b4e      	ldr	r3, [pc, #312]	; (8000378 <getKeyInput+0x178>)
 8000240:	68da      	ldr	r2, [r3, #12]
 8000242:	4b4d      	ldr	r3, [pc, #308]	; (8000378 <getKeyInput+0x178>)
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput+0x66>
			KeyReg0[3] = KeyReg0[2];
 800024a:	4b4b      	ldr	r3, [pc, #300]	; (8000378 <getKeyInput+0x178>)
 800024c:	689b      	ldr	r3, [r3, #8]
 800024e:	4a4a      	ldr	r2, [pc, #296]	; (8000378 <getKeyInput+0x178>)
 8000250:	60d3      	str	r3, [r2, #12]
			if(KeyReg0[2] == PRESSED_STATE){
 8000252:	4b49      	ldr	r3, [pc, #292]	; (8000378 <getKeyInput+0x178>)
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d111      	bne.n	800027e <getKeyInput+0x7e>
				subKeyProcess1();
 800025a:	f7ff ffad 	bl	80001b8 <subKeyProcess1>
				TimerForKeyPress = 200;
 800025e:	4b48      	ldr	r3, [pc, #288]	; (8000380 <getKeyInput+0x180>)
 8000260:	22c8      	movs	r2, #200	; 0xc8
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	e00b      	b.n	800027e <getKeyInput+0x7e>
			}
		}
		else{
			TimerForKeyPress--;
 8000266:	4b46      	ldr	r3, [pc, #280]	; (8000380 <getKeyInput+0x180>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a44      	ldr	r2, [pc, #272]	; (8000380 <getKeyInput+0x180>)
 800026e:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress <= 0){
 8000270:	4b43      	ldr	r3, [pc, #268]	; (8000380 <getKeyInput+0x180>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	dc02      	bgt.n	800027e <getKeyInput+0x7e>
				KeyReg0[3] = NORMAL_STATE;
 8000278:	4b3f      	ldr	r3, [pc, #252]	; (8000378 <getKeyInput+0x178>)
 800027a:	2201      	movs	r2, #1
 800027c:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//button 2
	KeyReg1[0] = KeyReg1[1];
 800027e:	4b41      	ldr	r3, [pc, #260]	; (8000384 <getKeyInput+0x184>)
 8000280:	685b      	ldr	r3, [r3, #4]
 8000282:	4a40      	ldr	r2, [pc, #256]	; (8000384 <getKeyInput+0x184>)
 8000284:	6013      	str	r3, [r2, #0]
	KeyReg1[1] = KeyReg1[2];
 8000286:	4b3f      	ldr	r3, [pc, #252]	; (8000384 <getKeyInput+0x184>)
 8000288:	689b      	ldr	r3, [r3, #8]
 800028a:	4a3e      	ldr	r2, [pc, #248]	; (8000384 <getKeyInput+0x184>)
 800028c:	6053      	str	r3, [r2, #4]
	KeyReg1[2] = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 800028e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000292:	483a      	ldr	r0, [pc, #232]	; (800037c <getKeyInput+0x17c>)
 8000294:	f002 f8ce 	bl	8002434 <HAL_GPIO_ReadPin>
 8000298:	4603      	mov	r3, r0
 800029a:	461a      	mov	r2, r3
 800029c:	4b39      	ldr	r3, [pc, #228]	; (8000384 <getKeyInput+0x184>)
 800029e:	609a      	str	r2, [r3, #8]
	if( (KeyReg1[0] == KeyReg1[1]) && (KeyReg1[1] == KeyReg1[2])){
 80002a0:	4b38      	ldr	r3, [pc, #224]	; (8000384 <getKeyInput+0x184>)
 80002a2:	681a      	ldr	r2, [r3, #0]
 80002a4:	4b37      	ldr	r3, [pc, #220]	; (8000384 <getKeyInput+0x184>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d125      	bne.n	80002f8 <getKeyInput+0xf8>
 80002ac:	4b35      	ldr	r3, [pc, #212]	; (8000384 <getKeyInput+0x184>)
 80002ae:	685a      	ldr	r2, [r3, #4]
 80002b0:	4b34      	ldr	r3, [pc, #208]	; (8000384 <getKeyInput+0x184>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	429a      	cmp	r2, r3
 80002b6:	d11f      	bne.n	80002f8 <getKeyInput+0xf8>
		if(KeyReg1[3] != KeyReg1[2]){
 80002b8:	4b32      	ldr	r3, [pc, #200]	; (8000384 <getKeyInput+0x184>)
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	4b31      	ldr	r3, [pc, #196]	; (8000384 <getKeyInput+0x184>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d00d      	beq.n	80002e0 <getKeyInput+0xe0>
			KeyReg1[3] = KeyReg1[2];
 80002c4:	4b2f      	ldr	r3, [pc, #188]	; (8000384 <getKeyInput+0x184>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	4a2e      	ldr	r2, [pc, #184]	; (8000384 <getKeyInput+0x184>)
 80002ca:	60d3      	str	r3, [r2, #12]
			if(KeyReg1[2] == PRESSED_STATE){
 80002cc:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <getKeyInput+0x184>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d111      	bne.n	80002f8 <getKeyInput+0xf8>
				subKeyProcess2();
 80002d4:	f7ff ff7c 	bl	80001d0 <subKeyProcess2>
				TimerForKeyPress = 200;
 80002d8:	4b29      	ldr	r3, [pc, #164]	; (8000380 <getKeyInput+0x180>)
 80002da:	22c8      	movs	r2, #200	; 0xc8
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	e00b      	b.n	80002f8 <getKeyInput+0xf8>
			}
		}
		else{
			TimerForKeyPress--;
 80002e0:	4b27      	ldr	r3, [pc, #156]	; (8000380 <getKeyInput+0x180>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	3b01      	subs	r3, #1
 80002e6:	4a26      	ldr	r2, [pc, #152]	; (8000380 <getKeyInput+0x180>)
 80002e8:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress <= 0){
 80002ea:	4b25      	ldr	r3, [pc, #148]	; (8000380 <getKeyInput+0x180>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	dc02      	bgt.n	80002f8 <getKeyInput+0xf8>
				KeyReg1[3] = NORMAL_STATE;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <getKeyInput+0x184>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
			}
		}
	}
	//button 3
	KeyReg2[0] = KeyReg2[1];
 80002f8:	4b23      	ldr	r3, [pc, #140]	; (8000388 <getKeyInput+0x188>)
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	4a22      	ldr	r2, [pc, #136]	; (8000388 <getKeyInput+0x188>)
 80002fe:	6013      	str	r3, [r2, #0]
	KeyReg2[1] = KeyReg2[2];
 8000300:	4b21      	ldr	r3, [pc, #132]	; (8000388 <getKeyInput+0x188>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a20      	ldr	r2, [pc, #128]	; (8000388 <getKeyInput+0x188>)
 8000306:	6053      	str	r3, [r2, #4]
	KeyReg2[2] = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 8000308:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800030c:	481b      	ldr	r0, [pc, #108]	; (800037c <getKeyInput+0x17c>)
 800030e:	f002 f891 	bl	8002434 <HAL_GPIO_ReadPin>
 8000312:	4603      	mov	r3, r0
 8000314:	461a      	mov	r2, r3
 8000316:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <getKeyInput+0x188>)
 8000318:	609a      	str	r2, [r3, #8]
	if( (KeyReg2[0] == KeyReg2[1]) && (KeyReg2[1] == KeyReg2[2])){
 800031a:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <getKeyInput+0x188>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <getKeyInput+0x188>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	429a      	cmp	r2, r3
 8000324:	d125      	bne.n	8000372 <getKeyInput+0x172>
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <getKeyInput+0x188>)
 8000328:	685a      	ldr	r2, [r3, #4]
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <getKeyInput+0x188>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	429a      	cmp	r2, r3
 8000330:	d11f      	bne.n	8000372 <getKeyInput+0x172>
		if(KeyReg2[3] != KeyReg2[2]){
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <getKeyInput+0x188>)
 8000334:	68da      	ldr	r2, [r3, #12]
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <getKeyInput+0x188>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	429a      	cmp	r2, r3
 800033c:	d00d      	beq.n	800035a <getKeyInput+0x15a>
			KeyReg2[3] = KeyReg2[2];
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <getKeyInput+0x188>)
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	4a11      	ldr	r2, [pc, #68]	; (8000388 <getKeyInput+0x188>)
 8000344:	60d3      	str	r3, [r2, #12]
			if(KeyReg2[2] == PRESSED_STATE){
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <getKeyInput+0x188>)
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d111      	bne.n	8000372 <getKeyInput+0x172>
				subKeyProcess3();
 800034e:	f7ff ff4b 	bl	80001e8 <subKeyProcess3>
				TimerForKeyPress = 200;
 8000352:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <getKeyInput+0x180>)
 8000354:	22c8      	movs	r2, #200	; 0xc8
 8000356:	601a      	str	r2, [r3, #0]
				KeyReg2[3] = NORMAL_STATE;
			}
		}
	}

}
 8000358:	e00b      	b.n	8000372 <getKeyInput+0x172>
			TimerForKeyPress--;
 800035a:	4b09      	ldr	r3, [pc, #36]	; (8000380 <getKeyInput+0x180>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3b01      	subs	r3, #1
 8000360:	4a07      	ldr	r2, [pc, #28]	; (8000380 <getKeyInput+0x180>)
 8000362:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress <= 0){
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <getKeyInput+0x180>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	dc02      	bgt.n	8000372 <getKeyInput+0x172>
				KeyReg2[3] = NORMAL_STATE;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <getKeyInput+0x188>)
 800036e:	2201      	movs	r2, #1
 8000370:	60da      	str	r2, [r3, #12]
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	20000000 	.word	0x20000000
 800037c:	40010c00 	.word	0x40010c00
 8000380:	20000030 	.word	0x20000030
 8000384:	20000010 	.word	0x20000010
 8000388:	20000020 	.word	0x20000020

0800038c <checkCount>:
 *  Created on: Oct 27, 2022
 *      Author: ASUS
 */
#include "check_mode.h"

void checkCount(){
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	switch(count){
 8000390:	4b71      	ldr	r3, [pc, #452]	; (8000558 <checkCount+0x1cc>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b03      	cmp	r3, #3
 8000396:	f200 80d4 	bhi.w	8000542 <checkCount+0x1b6>
 800039a:	a201      	add	r2, pc, #4	; (adr r2, 80003a0 <checkCount+0x14>)
 800039c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a0:	080003b1 	.word	0x080003b1
 80003a4:	08000411 	.word	0x08000411
 80003a8:	0800046f 	.word	0x0800046f
 80003ac:	080004d9 	.word	0x080004d9
	case 0:
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b6:	4869      	ldr	r0, [pc, #420]	; (800055c <checkCount+0x1d0>)
 80003b8:	f002 f853 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 80003bc:	2201      	movs	r2, #1
 80003be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003c2:	4866      	ldr	r0, [pc, #408]	; (800055c <checkCount+0x1d0>)
 80003c4:	f002 f84d 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ce:	4863      	ldr	r0, [pc, #396]	; (800055c <checkCount+0x1d0>)
 80003d0:	f002 f847 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2102      	movs	r1, #2
 80003d8:	4861      	ldr	r0, [pc, #388]	; (8000560 <checkCount+0x1d4>)
 80003da:	f002 f842 	bl	8002462 <HAL_GPIO_WritePin>
		if(mode == Mode2){
 80003de:	4b61      	ldr	r3, [pc, #388]	; (8000564 <checkCount+0x1d8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	2b0c      	cmp	r3, #12
 80003e4:	d103      	bne.n	80003ee <checkCount+0x62>
			display7SEG1(0);
 80003e6:	2000      	movs	r0, #0
 80003e8:	f001 f9bc 	bl	8001764 <display7SEG1>
			display7SEG1(0);
		}
		else if(mode == Mode4){
			display7SEG1(0);
		}
		break;
 80003ec:	e0ab      	b.n	8000546 <checkCount+0x1ba>
		else if(mode == Mode3){
 80003ee:	4b5d      	ldr	r3, [pc, #372]	; (8000564 <checkCount+0x1d8>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b0d      	cmp	r3, #13
 80003f4:	d103      	bne.n	80003fe <checkCount+0x72>
			display7SEG1(0);
 80003f6:	2000      	movs	r0, #0
 80003f8:	f001 f9b4 	bl	8001764 <display7SEG1>
		break;
 80003fc:	e0a3      	b.n	8000546 <checkCount+0x1ba>
		else if(mode == Mode4){
 80003fe:	4b59      	ldr	r3, [pc, #356]	; (8000564 <checkCount+0x1d8>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b0e      	cmp	r3, #14
 8000404:	f040 809f 	bne.w	8000546 <checkCount+0x1ba>
			display7SEG1(0);
 8000408:	2000      	movs	r0, #0
 800040a:	f001 f9ab 	bl	8001764 <display7SEG1>
		break;
 800040e:	e09a      	b.n	8000546 <checkCount+0x1ba>
	case 1:
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000416:	4851      	ldr	r0, [pc, #324]	; (800055c <checkCount+0x1d0>)
 8000418:	f002 f823 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000422:	484e      	ldr	r0, [pc, #312]	; (800055c <checkCount+0x1d0>)
 8000424:	f002 f81d 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, SET);
 8000428:	2201      	movs	r2, #1
 800042a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800042e:	484b      	ldr	r0, [pc, #300]	; (800055c <checkCount+0x1d0>)
 8000430:	f002 f817 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2102      	movs	r1, #2
 8000438:	4849      	ldr	r0, [pc, #292]	; (8000560 <checkCount+0x1d4>)
 800043a:	f002 f812 	bl	8002462 <HAL_GPIO_WritePin>
		if(mode == Mode2){
 800043e:	4b49      	ldr	r3, [pc, #292]	; (8000564 <checkCount+0x1d8>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b0c      	cmp	r3, #12
 8000444:	d103      	bne.n	800044e <checkCount+0xc2>
			display7SEG1(2);
 8000446:	2002      	movs	r0, #2
 8000448:	f001 f98c 	bl	8001764 <display7SEG1>
			display7SEG1(3);
		}
		else if(mode == Mode4){
			display7SEG1(4);
		}
		break;
 800044c:	e07d      	b.n	800054a <checkCount+0x1be>
		else if(mode == Mode3){
 800044e:	4b45      	ldr	r3, [pc, #276]	; (8000564 <checkCount+0x1d8>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	2b0d      	cmp	r3, #13
 8000454:	d103      	bne.n	800045e <checkCount+0xd2>
			display7SEG1(3);
 8000456:	2003      	movs	r0, #3
 8000458:	f001 f984 	bl	8001764 <display7SEG1>
		break;
 800045c:	e075      	b.n	800054a <checkCount+0x1be>
		else if(mode == Mode4){
 800045e:	4b41      	ldr	r3, [pc, #260]	; (8000564 <checkCount+0x1d8>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	2b0e      	cmp	r3, #14
 8000464:	d171      	bne.n	800054a <checkCount+0x1be>
			display7SEG1(4);
 8000466:	2004      	movs	r0, #4
 8000468:	f001 f97c 	bl	8001764 <display7SEG1>
		break;
 800046c:	e06d      	b.n	800054a <checkCount+0x1be>
	case 2:
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 800046e:	2201      	movs	r2, #1
 8000470:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000474:	4839      	ldr	r0, [pc, #228]	; (800055c <checkCount+0x1d0>)
 8000476:	f001 fff4 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 800047a:	2201      	movs	r2, #1
 800047c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000480:	4836      	ldr	r0, [pc, #216]	; (800055c <checkCount+0x1d0>)
 8000482:	f001 ffee 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800048c:	4833      	ldr	r0, [pc, #204]	; (800055c <checkCount+0x1d0>)
 800048e:	f001 ffe8 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, SET);
 8000492:	2201      	movs	r2, #1
 8000494:	2102      	movs	r1, #2
 8000496:	4832      	ldr	r0, [pc, #200]	; (8000560 <checkCount+0x1d4>)
 8000498:	f001 ffe3 	bl	8002462 <HAL_GPIO_WritePin>
		if(mode == Mode2){
 800049c:	4b31      	ldr	r3, [pc, #196]	; (8000564 <checkCount+0x1d8>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b0c      	cmp	r3, #12
 80004a2:	d105      	bne.n	80004b0 <checkCount+0x124>
			display7SEG(led_buffer_red[0]);
 80004a4:	4b30      	ldr	r3, [pc, #192]	; (8000568 <checkCount+0x1dc>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f000 ffc3 	bl	8001434 <display7SEG>
			display7SEG(led_buffer_green[0]);
		}
		else if(mode == Mode4){
			display7SEG(led_buffer_yellow[0]);
		}
		break;
 80004ae:	e04e      	b.n	800054e <checkCount+0x1c2>
		else if(mode == Mode3){
 80004b0:	4b2c      	ldr	r3, [pc, #176]	; (8000564 <checkCount+0x1d8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2b0d      	cmp	r3, #13
 80004b6:	d105      	bne.n	80004c4 <checkCount+0x138>
			display7SEG(led_buffer_green[0]);
 80004b8:	4b2c      	ldr	r3, [pc, #176]	; (800056c <checkCount+0x1e0>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 ffb9 	bl	8001434 <display7SEG>
		break;
 80004c2:	e044      	b.n	800054e <checkCount+0x1c2>
		else if(mode == Mode4){
 80004c4:	4b27      	ldr	r3, [pc, #156]	; (8000564 <checkCount+0x1d8>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b0e      	cmp	r3, #14
 80004ca:	d140      	bne.n	800054e <checkCount+0x1c2>
			display7SEG(led_buffer_yellow[0]);
 80004cc:	4b28      	ldr	r3, [pc, #160]	; (8000570 <checkCount+0x1e4>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 ffaf 	bl	8001434 <display7SEG>
		break;
 80004d6:	e03a      	b.n	800054e <checkCount+0x1c2>
	case 3:
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004de:	481f      	ldr	r0, [pc, #124]	; (800055c <checkCount+0x1d0>)
 80004e0:	f001 ffbf 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ea:	481c      	ldr	r0, [pc, #112]	; (800055c <checkCount+0x1d0>)
 80004ec:	f001 ffb9 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004f6:	4819      	ldr	r0, [pc, #100]	; (800055c <checkCount+0x1d0>)
 80004f8:	f001 ffb3 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2102      	movs	r1, #2
 8000500:	4817      	ldr	r0, [pc, #92]	; (8000560 <checkCount+0x1d4>)
 8000502:	f001 ffae 	bl	8002462 <HAL_GPIO_WritePin>
		if(mode == Mode2){
 8000506:	4b17      	ldr	r3, [pc, #92]	; (8000564 <checkCount+0x1d8>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	2b0c      	cmp	r3, #12
 800050c:	d105      	bne.n	800051a <checkCount+0x18e>
			display7SEG1(led_buffer_red[1]);
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <checkCount+0x1dc>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	4618      	mov	r0, r3
 8000514:	f001 f926 	bl	8001764 <display7SEG1>
			display7SEG1(led_buffer_green[1]);
		}
		else if(mode == Mode4){
			display7SEG1(led_buffer_yellow[1]);
		}
		break;
 8000518:	e01b      	b.n	8000552 <checkCount+0x1c6>
		else if(mode == Mode3){
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <checkCount+0x1d8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b0d      	cmp	r3, #13
 8000520:	d105      	bne.n	800052e <checkCount+0x1a2>
			display7SEG1(led_buffer_green[1]);
 8000522:	4b12      	ldr	r3, [pc, #72]	; (800056c <checkCount+0x1e0>)
 8000524:	685b      	ldr	r3, [r3, #4]
 8000526:	4618      	mov	r0, r3
 8000528:	f001 f91c 	bl	8001764 <display7SEG1>
		break;
 800052c:	e011      	b.n	8000552 <checkCount+0x1c6>
		else if(mode == Mode4){
 800052e:	4b0d      	ldr	r3, [pc, #52]	; (8000564 <checkCount+0x1d8>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b0e      	cmp	r3, #14
 8000534:	d10d      	bne.n	8000552 <checkCount+0x1c6>
			display7SEG1(led_buffer_yellow[1]);
 8000536:	4b0e      	ldr	r3, [pc, #56]	; (8000570 <checkCount+0x1e4>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	4618      	mov	r0, r3
 800053c:	f001 f912 	bl	8001764 <display7SEG1>
		break;
 8000540:	e007      	b.n	8000552 <checkCount+0x1c6>
	default:
		break;
 8000542:	bf00      	nop
 8000544:	e006      	b.n	8000554 <checkCount+0x1c8>
		break;
 8000546:	bf00      	nop
 8000548:	e004      	b.n	8000554 <checkCount+0x1c8>
		break;
 800054a:	bf00      	nop
 800054c:	e002      	b.n	8000554 <checkCount+0x1c8>
		break;
 800054e:	bf00      	nop
 8000550:	e000      	b.n	8000554 <checkCount+0x1c8>
		break;
 8000552:	bf00      	nop
	}
}
 8000554:	bf00      	nop
 8000556:	bd80      	pop	{r7, pc}
 8000558:	200000d0 	.word	0x200000d0
 800055c:	40010c00 	.word	0x40010c00
 8000560:	40010800 	.word	0x40010800
 8000564:	20000034 	.word	0x20000034
 8000568:	20000044 	.word	0x20000044
 800056c:	2000004c 	.word	0x2000004c
 8000570:	20000054 	.word	0x20000054

08000574 <ledMode2>:
void ledMode2(){
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	// SET green, yellow
	HAL_GPIO_WritePin(Led_Green1_GPIO_Port,Led_Green1_Pin, 1);
 8000578:	2201      	movs	r2, #1
 800057a:	2102      	movs	r1, #2
 800057c:	4814      	ldr	r0, [pc, #80]	; (80005d0 <ledMode2+0x5c>)
 800057e:	f001 ff70 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow1_GPIO_Port,Led_Yellow1_Pin, 1);
 8000582:	2201      	movs	r2, #1
 8000584:	2104      	movs	r1, #4
 8000586:	4812      	ldr	r0, [pc, #72]	; (80005d0 <ledMode2+0x5c>)
 8000588:	f001 ff6b 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Green2_GPIO_Port,Led_Green2_Pin, 1);
 800058c:	2201      	movs	r2, #1
 800058e:	2110      	movs	r1, #16
 8000590:	480f      	ldr	r0, [pc, #60]	; (80005d0 <ledMode2+0x5c>)
 8000592:	f001 ff66 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port,Led_Yellow2_Pin, 1);
 8000596:	2201      	movs	r2, #1
 8000598:	2120      	movs	r1, #32
 800059a:	480d      	ldr	r0, [pc, #52]	; (80005d0 <ledMode2+0x5c>)
 800059c:	f001 ff61 	bl	8002462 <HAL_GPIO_WritePin>
	// set EN0 ,EN1, EN2, EN3
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <ledMode2+0x5c>)
 80005a8:	f001 ff5b 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2140      	movs	r1, #64	; 0x40
 80005b0:	4807      	ldr	r0, [pc, #28]	; (80005d0 <ledMode2+0x5c>)
 80005b2:	f001 ff56 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	4805      	ldr	r0, [pc, #20]	; (80005d0 <ledMode2+0x5c>)
 80005bc:	f001 ff51 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c6:	4802      	ldr	r0, [pc, #8]	; (80005d0 <ledMode2+0x5c>)
 80005c8:	f001 ff4b 	bl	8002462 <HAL_GPIO_WritePin>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40010c00 	.word	0x40010c00

080005d4 <ledMode3>:
void ledMode3(){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	// SET red, yellow
	HAL_GPIO_WritePin(Led_Red1_GPIO_Port, Led_Red1_Pin, 1);
 80005d8:	2201      	movs	r2, #1
 80005da:	2101      	movs	r1, #1
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <ledMode3+0x5c>)
 80005de:	f001 ff40 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 80005e2:	2201      	movs	r2, #1
 80005e4:	2108      	movs	r1, #8
 80005e6:	4812      	ldr	r0, [pc, #72]	; (8000630 <ledMode3+0x5c>)
 80005e8:	f001 ff3b 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow1_GPIO_Port,Led_Yellow1_Pin, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2104      	movs	r1, #4
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <ledMode3+0x5c>)
 80005f2:	f001 ff36 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port,Led_Yellow2_Pin, 1);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2120      	movs	r1, #32
 80005fa:	480d      	ldr	r0, [pc, #52]	; (8000630 <ledMode3+0x5c>)
 80005fc:	f001 ff31 	bl	8002462 <HAL_GPIO_WritePin>
	// set EN0 ,EN1, EN2, EN3
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000606:	480a      	ldr	r0, [pc, #40]	; (8000630 <ledMode3+0x5c>)
 8000608:	f001 ff2b 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <ledMode3+0x5c>)
 8000612:	f001 ff26 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	4805      	ldr	r0, [pc, #20]	; (8000630 <ledMode3+0x5c>)
 800061c:	f001 ff21 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000626:	4802      	ldr	r0, [pc, #8]	; (8000630 <ledMode3+0x5c>)
 8000628:	f001 ff1b 	bl	8002462 <HAL_GPIO_WritePin>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40010c00 	.word	0x40010c00

08000634 <ledMode4>:
void ledMode4(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	// SET red, green
	HAL_GPIO_WritePin(Led_Red1_GPIO_Port, Led_Red1_Pin, 1);
 8000638:	2201      	movs	r2, #1
 800063a:	2101      	movs	r1, #1
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <ledMode4+0x5c>)
 800063e:	f001 ff10 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 8000642:	2201      	movs	r2, #1
 8000644:	2108      	movs	r1, #8
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <ledMode4+0x5c>)
 8000648:	f001 ff0b 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Green1_GPIO_Port,Led_Green1_Pin, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	2102      	movs	r1, #2
 8000650:	480f      	ldr	r0, [pc, #60]	; (8000690 <ledMode4+0x5c>)
 8000652:	f001 ff06 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Led_Green2_GPIO_Port,Led_Green2_Pin, 1);
 8000656:	2201      	movs	r2, #1
 8000658:	2110      	movs	r1, #16
 800065a:	480d      	ldr	r0, [pc, #52]	; (8000690 <ledMode4+0x5c>)
 800065c:	f001 ff01 	bl	8002462 <HAL_GPIO_WritePin>
	// set EN0 ,EN1, EN2, EN3
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000660:	2201      	movs	r2, #1
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	480a      	ldr	r0, [pc, #40]	; (8000690 <ledMode4+0x5c>)
 8000668:	f001 fefb 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800066c:	2201      	movs	r2, #1
 800066e:	2140      	movs	r1, #64	; 0x40
 8000670:	4807      	ldr	r0, [pc, #28]	; (8000690 <ledMode4+0x5c>)
 8000672:	f001 fef6 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	4805      	ldr	r0, [pc, #20]	; (8000690 <ledMode4+0x5c>)
 800067c:	f001 fef1 	bl	8002462 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000686:	4802      	ldr	r0, [pc, #8]	; (8000690 <ledMode4+0x5c>)
 8000688:	f001 feeb 	bl	8002462 <HAL_GPIO_WritePin>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40010c00 	.word	0x40010c00

08000694 <checkMode>:
void checkMode(){
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	switch(mode){
 8000698:	4ba8      	ldr	r3, [pc, #672]	; (800093c <checkMode+0x2a8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b0a      	subs	r3, #10
 800069e:	2b04      	cmp	r3, #4
 80006a0:	f200 81cb 	bhi.w	8000a3a <checkMode+0x3a6>
 80006a4:	a201      	add	r2, pc, #4	; (adr r2, 80006ac <checkMode+0x18>)
 80006a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006aa:	bf00      	nop
 80006ac:	080006c1 	.word	0x080006c1
 80006b0:	0800075f 	.word	0x0800075f
 80006b4:	08000797 	.word	0x08000797
 80006b8:	08000869 	.word	0x08000869
 80006bc:	08000965 	.word	0x08000965
	case INIT:
		// set all
		HAL_GPIO_WritePin(Led_Red1_GPIO_Port, Led_Red1_Pin, 1);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2101      	movs	r1, #1
 80006c4:	489e      	ldr	r0, [pc, #632]	; (8000940 <checkMode+0x2ac>)
 80006c6:	f001 fecc 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	2108      	movs	r1, #8
 80006ce:	489c      	ldr	r0, [pc, #624]	; (8000940 <checkMode+0x2ac>)
 80006d0:	f001 fec7 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Yellow1_GPIO_Port,Led_Yellow1_Pin, 1);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2104      	movs	r1, #4
 80006d8:	4899      	ldr	r0, [pc, #612]	; (8000940 <checkMode+0x2ac>)
 80006da:	f001 fec2 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port,Led_Yellow2_Pin, 1);
 80006de:	2201      	movs	r2, #1
 80006e0:	2120      	movs	r1, #32
 80006e2:	4897      	ldr	r0, [pc, #604]	; (8000940 <checkMode+0x2ac>)
 80006e4:	f001 febd 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Green1_GPIO_Port,Led_Green1_Pin, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2102      	movs	r1, #2
 80006ec:	4894      	ldr	r0, [pc, #592]	; (8000940 <checkMode+0x2ac>)
 80006ee:	f001 feb8 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Led_Green2_GPIO_Port,Led_Green2_Pin, 1);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2110      	movs	r1, #16
 80006f6:	4892      	ldr	r0, [pc, #584]	; (8000940 <checkMode+0x2ac>)
 80006f8:	f001 feb3 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000702:	488f      	ldr	r0, [pc, #572]	; (8000940 <checkMode+0x2ac>)
 8000704:	f001 fead 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000708:	2201      	movs	r2, #1
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	488c      	ldr	r0, [pc, #560]	; (8000940 <checkMode+0x2ac>)
 800070e:	f001 fea8 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	488a      	ldr	r0, [pc, #552]	; (8000940 <checkMode+0x2ac>)
 8000718:	f001 fea3 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	4887      	ldr	r0, [pc, #540]	; (8000940 <checkMode+0x2ac>)
 8000724:	f001 fe9d 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	4884      	ldr	r0, [pc, #528]	; (8000940 <checkMode+0x2ac>)
 8000730:	f001 fe97 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 8000734:	2201      	movs	r2, #1
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4881      	ldr	r0, [pc, #516]	; (8000940 <checkMode+0x2ac>)
 800073c:	f001 fe91 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, SET);
 8000740:	2201      	movs	r2, #1
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	487e      	ldr	r0, [pc, #504]	; (8000940 <checkMode+0x2ac>)
 8000748:	f001 fe8b 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, SET);
 800074c:	2201      	movs	r2, #1
 800074e:	2102      	movs	r1, #2
 8000750:	487c      	ldr	r0, [pc, #496]	; (8000944 <checkMode+0x2b0>)
 8000752:	f001 fe86 	bl	8002462 <HAL_GPIO_WritePin>
		mode = Mode1;
 8000756:	4b79      	ldr	r3, [pc, #484]	; (800093c <checkMode+0x2a8>)
 8000758:	220b      	movs	r2, #11
 800075a:	601a      	str	r2, [r3, #0]
		break;
 800075c:	e176      	b.n	8000a4c <checkMode+0x3b8>
	// Mode 1: Normal
	case Mode1:
		fsm_auto_run();
 800075e:	f000 fb93 	bl	8000e88 <fsm_auto_run>
		if(isButton1Pressed() == 1){
 8000762:	f7ff fcf3 	bl	800014c <isButton1Pressed>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	f040 8168 	bne.w	8000a3e <checkMode+0x3aa>
			mode = Mode2;
 800076e:	4b73      	ldr	r3, [pc, #460]	; (800093c <checkMode+0x2a8>)
 8000770:	220c      	movs	r2, #12
 8000772:	601a      	str	r2, [r3, #0]
			count = 0;
 8000774:	4b74      	ldr	r3, [pc, #464]	; (8000948 <checkMode+0x2b4>)
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
			setTimer5(250);
 800077a:	20fa      	movs	r0, #250	; 0xfa
 800077c:	f001 fa38 	bl	8001bf0 <setTimer5>
			// set up red led blinky
			HAL_GPIO_WritePin(Led_Red1_GPIO_Port, Led_Red1_Pin, 1);
 8000780:	2201      	movs	r2, #1
 8000782:	2101      	movs	r1, #1
 8000784:	486e      	ldr	r0, [pc, #440]	; (8000940 <checkMode+0x2ac>)
 8000786:	f001 fe6c 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port, Led_Red2_Pin, 1);
 800078a:	2201      	movs	r2, #1
 800078c:	2108      	movs	r1, #8
 800078e:	486c      	ldr	r0, [pc, #432]	; (8000940 <checkMode+0x2ac>)
 8000790:	f001 fe67 	bl	8002462 <HAL_GPIO_WritePin>
		}
		break;
 8000794:	e153      	b.n	8000a3e <checkMode+0x3aa>
	// Mode 2: set red duration
	case Mode2:
		// set up led mode 2
		if(timer5_flag == 1){
 8000796:	4b6d      	ldr	r3, [pc, #436]	; (800094c <checkMode+0x2b8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d110      	bne.n	80007c0 <checkMode+0x12c>
			count++;
 800079e:	4b6a      	ldr	r3, [pc, #424]	; (8000948 <checkMode+0x2b4>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	3301      	adds	r3, #1
 80007a4:	4a68      	ldr	r2, [pc, #416]	; (8000948 <checkMode+0x2b4>)
 80007a6:	6013      	str	r3, [r2, #0]
			if(count >= 4){
 80007a8:	4b67      	ldr	r3, [pc, #412]	; (8000948 <checkMode+0x2b4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	dd02      	ble.n	80007b6 <checkMode+0x122>
				count = 0;
 80007b0:	4b65      	ldr	r3, [pc, #404]	; (8000948 <checkMode+0x2b4>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
			}
			checkCount();
 80007b6:	f7ff fde9 	bl	800038c <checkCount>
			setTimer5(250);
 80007ba:	20fa      	movs	r0, #250	; 0xfa
 80007bc:	f001 fa18 	bl	8001bf0 <setTimer5>
		}
		// led mode 2: blinky red 2s
		ledMode2();
 80007c0:	f7ff fed8 	bl	8000574 <ledMode2>
		if(timer3_flag == 1){
 80007c4:	4b62      	ldr	r3, [pc, #392]	; (8000950 <checkMode+0x2bc>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d10b      	bne.n	80007e4 <checkMode+0x150>
			HAL_GPIO_TogglePin(Led_Red1_GPIO_Port, Led_Red1_Pin);
 80007cc:	2101      	movs	r1, #1
 80007ce:	485c      	ldr	r0, [pc, #368]	; (8000940 <checkMode+0x2ac>)
 80007d0:	f001 fe5f 	bl	8002492 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Led_Red2_GPIO_Port, Led_Red2_Pin);
 80007d4:	2108      	movs	r1, #8
 80007d6:	485a      	ldr	r0, [pc, #360]	; (8000940 <checkMode+0x2ac>)
 80007d8:	f001 fe5b 	bl	8002492 <HAL_GPIO_TogglePin>
			setTimer3(2000);
 80007dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007e0:	f001 f9d2 	bl	8001b88 <setTimer3>
		}
		// readingInputRed
		if(isButton2Pressed() == 1){
 80007e4:	f7ff fcc4 	bl	8000170 <isButton2Pressed>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d104      	bne.n	80007f8 <checkMode+0x164>
			led_buffer_red[1]++;
 80007ee:	4b59      	ldr	r3, [pc, #356]	; (8000954 <checkMode+0x2c0>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	4a57      	ldr	r2, [pc, #348]	; (8000954 <checkMode+0x2c0>)
 80007f6:	6053      	str	r3, [r2, #4]
		}

		// Update red if > 99
		if(led_buffer_red[1] > 9){
 80007f8:	4b56      	ldr	r3, [pc, #344]	; (8000954 <checkMode+0x2c0>)
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	2b09      	cmp	r3, #9
 80007fe:	dd0e      	ble.n	800081e <checkMode+0x18a>
			led_buffer_red[0] ++;
 8000800:	4b54      	ldr	r3, [pc, #336]	; (8000954 <checkMode+0x2c0>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3301      	adds	r3, #1
 8000806:	4a53      	ldr	r2, [pc, #332]	; (8000954 <checkMode+0x2c0>)
 8000808:	6013      	str	r3, [r2, #0]
			led_buffer_red[1] = 0;
 800080a:	4b52      	ldr	r3, [pc, #328]	; (8000954 <checkMode+0x2c0>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
			if(led_buffer_red[0] > 9){
 8000810:	4b50      	ldr	r3, [pc, #320]	; (8000954 <checkMode+0x2c0>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b09      	cmp	r3, #9
 8000816:	dd02      	ble.n	800081e <checkMode+0x18a>
				led_buffer_red[0] = 0;
 8000818:	4b4e      	ldr	r3, [pc, #312]	; (8000954 <checkMode+0x2c0>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
			}
		}
		//update red_time
		if(isButton3Pressed() == 1){
 800081e:	f7ff fcb9 	bl	8000194 <isButton3Pressed>
 8000822:	4603      	mov	r3, r0
 8000824:	2b01      	cmp	r3, #1
 8000826:	d10b      	bne.n	8000840 <checkMode+0x1ac>
			red_time = led_buffer_red[0] * 10 + led_buffer_red[1];
 8000828:	4b4a      	ldr	r3, [pc, #296]	; (8000954 <checkMode+0x2c0>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	4613      	mov	r3, r2
 800082e:	009b      	lsls	r3, r3, #2
 8000830:	4413      	add	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	461a      	mov	r2, r3
 8000836:	4b47      	ldr	r3, [pc, #284]	; (8000954 <checkMode+0x2c0>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4413      	add	r3, r2
 800083c:	4a46      	ldr	r2, [pc, #280]	; (8000958 <checkMode+0x2c4>)
 800083e:	6013      	str	r3, [r2, #0]
		}
		// switch mode
		if(isButton1Pressed() == 1){
 8000840:	f7ff fc84 	bl	800014c <isButton1Pressed>
 8000844:	4603      	mov	r3, r0
 8000846:	2b01      	cmp	r3, #1
 8000848:	f040 80fb 	bne.w	8000a42 <checkMode+0x3ae>
			mode = Mode3;
 800084c:	4b3b      	ldr	r3, [pc, #236]	; (800093c <checkMode+0x2a8>)
 800084e:	220d      	movs	r2, #13
 8000850:	601a      	str	r2, [r3, #0]
			setTimer3(2000);
 8000852:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000856:	f001 f997 	bl	8001b88 <setTimer3>
			count = 0;
 800085a:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <checkMode+0x2b4>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
			setTimer5(250);
 8000860:	20fa      	movs	r0, #250	; 0xfa
 8000862:	f001 f9c5 	bl	8001bf0 <setTimer5>
		}
		break;
 8000866:	e0ec      	b.n	8000a42 <checkMode+0x3ae>

	case Mode3:
		// set up led mode 3:P blinky green
		ledMode3();
 8000868:	f7ff feb4 	bl	80005d4 <ledMode3>
		if(timer5_flag == 1){
 800086c:	4b37      	ldr	r3, [pc, #220]	; (800094c <checkMode+0x2b8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d110      	bne.n	8000896 <checkMode+0x202>
			count++;
 8000874:	4b34      	ldr	r3, [pc, #208]	; (8000948 <checkMode+0x2b4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	3301      	adds	r3, #1
 800087a:	4a33      	ldr	r2, [pc, #204]	; (8000948 <checkMode+0x2b4>)
 800087c:	6013      	str	r3, [r2, #0]
			if(count >= 4){
 800087e:	4b32      	ldr	r3, [pc, #200]	; (8000948 <checkMode+0x2b4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b03      	cmp	r3, #3
 8000884:	dd02      	ble.n	800088c <checkMode+0x1f8>
				count = 0;
 8000886:	4b30      	ldr	r3, [pc, #192]	; (8000948 <checkMode+0x2b4>)
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
			}
			checkCount();
 800088c:	f7ff fd7e 	bl	800038c <checkCount>
			setTimer5(250);
 8000890:	20fa      	movs	r0, #250	; 0xfa
 8000892:	f001 f9ad 	bl	8001bf0 <setTimer5>
		}
		if(timer3_flag == 1){
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <checkMode+0x2bc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d10b      	bne.n	80008b6 <checkMode+0x222>
			HAL_GPIO_TogglePin(Led_Green1_GPIO_Port, Led_Green1_Pin);
 800089e:	2102      	movs	r1, #2
 80008a0:	4827      	ldr	r0, [pc, #156]	; (8000940 <checkMode+0x2ac>)
 80008a2:	f001 fdf6 	bl	8002492 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Led_Green2_GPIO_Port, Led_Green2_Pin);
 80008a6:	2110      	movs	r1, #16
 80008a8:	4825      	ldr	r0, [pc, #148]	; (8000940 <checkMode+0x2ac>)
 80008aa:	f001 fdf2 	bl	8002492 <HAL_GPIO_TogglePin>
			setTimer3(2000);
 80008ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008b2:	f001 f969 	bl	8001b88 <setTimer3>
		}
		// reading input green
		if(isButton2Pressed() == 1){
 80008b6:	f7ff fc5b 	bl	8000170 <isButton2Pressed>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d104      	bne.n	80008ca <checkMode+0x236>
			led_buffer_green[1]++;
 80008c0:	4b26      	ldr	r3, [pc, #152]	; (800095c <checkMode+0x2c8>)
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a25      	ldr	r2, [pc, #148]	; (800095c <checkMode+0x2c8>)
 80008c8:	6053      	str	r3, [r2, #4]
		}
		// update if > 99
		if(led_buffer_green[1] > 9){
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <checkMode+0x2c8>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	2b09      	cmp	r3, #9
 80008d0:	dd0e      	ble.n	80008f0 <checkMode+0x25c>
			led_buffer_green[0] ++;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <checkMode+0x2c8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	3301      	adds	r3, #1
 80008d8:	4a20      	ldr	r2, [pc, #128]	; (800095c <checkMode+0x2c8>)
 80008da:	6013      	str	r3, [r2, #0]
			led_buffer_green[1] = 0;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <checkMode+0x2c8>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
			if(led_buffer_green[0] > 9){
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <checkMode+0x2c8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b09      	cmp	r3, #9
 80008e8:	dd02      	ble.n	80008f0 <checkMode+0x25c>
				led_buffer_green[0] = 0;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <checkMode+0x2c8>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
			}
		}
		//update green
		if(isButton3Pressed() == 1){
 80008f0:	f7ff fc50 	bl	8000194 <isButton3Pressed>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d10b      	bne.n	8000912 <checkMode+0x27e>
			green_time = led_buffer_green[0] * 10 + led_buffer_green[1];
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <checkMode+0x2c8>)
 80008fc:	681a      	ldr	r2, [r3, #0]
 80008fe:	4613      	mov	r3, r2
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	461a      	mov	r2, r3
 8000908:	4b14      	ldr	r3, [pc, #80]	; (800095c <checkMode+0x2c8>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	4413      	add	r3, r2
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <checkMode+0x2cc>)
 8000910:	6013      	str	r3, [r2, #0]
		}
		// out mode 3
		if(isButton1Pressed() == 1){
 8000912:	f7ff fc1b 	bl	800014c <isButton1Pressed>
 8000916:	4603      	mov	r3, r0
 8000918:	2b01      	cmp	r3, #1
 800091a:	f040 8094 	bne.w	8000a46 <checkMode+0x3b2>
			mode = Mode4;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <checkMode+0x2a8>)
 8000920:	220e      	movs	r2, #14
 8000922:	601a      	str	r2, [r3, #0]
			setTimer3(2000);
 8000924:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000928:	f001 f92e 	bl	8001b88 <setTimer3>
			count = 0;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <checkMode+0x2b4>)
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
			setTimer5(250);
 8000932:	20fa      	movs	r0, #250	; 0xfa
 8000934:	f001 f95c 	bl	8001bf0 <setTimer5>
		}
		break;
 8000938:	e085      	b.n	8000a46 <checkMode+0x3b2>
 800093a:	bf00      	nop
 800093c:	20000034 	.word	0x20000034
 8000940:	40010c00 	.word	0x40010c00
 8000944:	40010800 	.word	0x40010800
 8000948:	200000d0 	.word	0x200000d0
 800094c:	200000f4 	.word	0x200000f4
 8000950:	200000e4 	.word	0x200000e4
 8000954:	20000044 	.word	0x20000044
 8000958:	20000038 	.word	0x20000038
 800095c:	2000004c 	.word	0x2000004c
 8000960:	2000003c 	.word	0x2000003c

	case Mode4:
		// set led mode 4: blinky yellow
		ledMode4();
 8000964:	f7ff fe66 	bl	8000634 <ledMode4>
		if(timer5_flag == 1){
 8000968:	4b39      	ldr	r3, [pc, #228]	; (8000a50 <checkMode+0x3bc>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d110      	bne.n	8000992 <checkMode+0x2fe>
			count++;
 8000970:	4b38      	ldr	r3, [pc, #224]	; (8000a54 <checkMode+0x3c0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	3301      	adds	r3, #1
 8000976:	4a37      	ldr	r2, [pc, #220]	; (8000a54 <checkMode+0x3c0>)
 8000978:	6013      	str	r3, [r2, #0]
			if(count >= 4){
 800097a:	4b36      	ldr	r3, [pc, #216]	; (8000a54 <checkMode+0x3c0>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b03      	cmp	r3, #3
 8000980:	dd02      	ble.n	8000988 <checkMode+0x2f4>
				count = 0;
 8000982:	4b34      	ldr	r3, [pc, #208]	; (8000a54 <checkMode+0x3c0>)
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
			}
			checkCount();
 8000988:	f7ff fd00 	bl	800038c <checkCount>
			setTimer5(250);
 800098c:	20fa      	movs	r0, #250	; 0xfa
 800098e:	f001 f92f 	bl	8001bf0 <setTimer5>
		}
		//blinky yellow led
		if(timer3_flag == 1){
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <checkMode+0x3c4>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d10b      	bne.n	80009b2 <checkMode+0x31e>
			HAL_GPIO_TogglePin(Led_Yellow1_GPIO_Port, Led_Yellow1_Pin);
 800099a:	2104      	movs	r1, #4
 800099c:	482f      	ldr	r0, [pc, #188]	; (8000a5c <checkMode+0x3c8>)
 800099e:	f001 fd78 	bl	8002492 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Led_Yellow2_GPIO_Port, Led_Yellow2_Pin);
 80009a2:	2120      	movs	r1, #32
 80009a4:	482d      	ldr	r0, [pc, #180]	; (8000a5c <checkMode+0x3c8>)
 80009a6:	f001 fd74 	bl	8002492 <HAL_GPIO_TogglePin>
			setTimer3(2000);
 80009aa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009ae:	f001 f8eb 	bl	8001b88 <setTimer3>
		}
			// reading Input yellow
			if(isButton2Pressed() == 1){
 80009b2:	f7ff fbdd 	bl	8000170 <isButton2Pressed>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d104      	bne.n	80009c6 <checkMode+0x332>
				led_buffer_yellow[1]++;
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <checkMode+0x3cc>)
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a27      	ldr	r2, [pc, #156]	; (8000a60 <checkMode+0x3cc>)
 80009c4:	6053      	str	r3, [r2, #4]
			}
			// update if > 99:
			if(led_buffer_yellow[1] > 9){
 80009c6:	4b26      	ldr	r3, [pc, #152]	; (8000a60 <checkMode+0x3cc>)
 80009c8:	685b      	ldr	r3, [r3, #4]
 80009ca:	2b09      	cmp	r3, #9
 80009cc:	dd0e      	ble.n	80009ec <checkMode+0x358>
				led_buffer_yellow[0] ++;
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <checkMode+0x3cc>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <checkMode+0x3cc>)
 80009d6:	6013      	str	r3, [r2, #0]
				led_buffer_yellow[1] = 0;
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <checkMode+0x3cc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
				if(led_buffer_yellow[0] > 9){
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <checkMode+0x3cc>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b09      	cmp	r3, #9
 80009e4:	dd02      	ble.n	80009ec <checkMode+0x358>
					led_buffer_yellow[0] = 0;
 80009e6:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <checkMode+0x3cc>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
				}
			}
			//update yellow time
			if(isButton3Pressed() == 1){
 80009ec:	f7ff fbd2 	bl	8000194 <isButton3Pressed>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d10b      	bne.n	8000a0e <checkMode+0x37a>
				yellow_time = led_buffer_yellow[0] * 10 + led_buffer_yellow[1];
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <checkMode+0x3cc>)
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	005b      	lsls	r3, r3, #1
 8000a02:	461a      	mov	r2, r3
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <checkMode+0x3cc>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	4a16      	ldr	r2, [pc, #88]	; (8000a64 <checkMode+0x3d0>)
 8000a0c:	6013      	str	r3, [r2, #0]
			}
		// out mode 4, in 1
		if(isButton1Pressed() == 1){
 8000a0e:	f7ff fb9d 	bl	800014c <isButton1Pressed>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d118      	bne.n	8000a4a <checkMode+0x3b6>
			mode = Mode1;
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <checkMode+0x3d4>)
 8000a1a:	220b      	movs	r2, #11
 8000a1c:	601a      	str	r2, [r3, #0]
			status1 = INIT1;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <checkMode+0x3d8>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	601a      	str	r2, [r3, #0]
			status2 = INIT2;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <checkMode+0x3dc>)
 8000a26:	2205      	movs	r2, #5
 8000a28:	601a      	str	r2, [r3, #0]
			setTimer3(2000);
 8000a2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a2e:	f001 f8ab 	bl	8001b88 <setTimer3>
			setTimer4(250);
 8000a32:	20fa      	movs	r0, #250	; 0xfa
 8000a34:	f001 f8c2 	bl	8001bbc <setTimer4>
		}
		break;
 8000a38:	e007      	b.n	8000a4a <checkMode+0x3b6>

	default:
		break;
 8000a3a:	bf00      	nop
 8000a3c:	e006      	b.n	8000a4c <checkMode+0x3b8>
		break;
 8000a3e:	bf00      	nop
 8000a40:	e004      	b.n	8000a4c <checkMode+0x3b8>
		break;
 8000a42:	bf00      	nop
 8000a44:	e002      	b.n	8000a4c <checkMode+0x3b8>
		break;
 8000a46:	bf00      	nop
 8000a48:	e000      	b.n	8000a4c <checkMode+0x3b8>
		break;
 8000a4a:	bf00      	nop
	}
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000f4 	.word	0x200000f4
 8000a54:	200000d0 	.word	0x200000d0
 8000a58:	200000e4 	.word	0x200000e4
 8000a5c:	40010c00 	.word	0x40010c00
 8000a60:	20000054 	.word	0x20000054
 8000a64:	20000040 	.word	0x20000040
 8000a68:	20000034 	.word	0x20000034
 8000a6c:	200000c8 	.word	0x200000c8
 8000a70:	200000c4 	.word	0x200000c4

08000a74 <decreaseAfter1s>:


int ledbuffer1[2]={0, 0};
int ledbuffer2[2]= {0, 0};

void decreaseAfter1s(){
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

	// 1
	switch(status1){
 8000a78:	4b49      	ldr	r3, [pc, #292]	; (8000ba0 <decreaseAfter1s+0x12c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	d02a      	beq.n	8000ad6 <decreaseAfter1s+0x62>
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	dc3a      	bgt.n	8000afa <decreaseAfter1s+0x86>
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d002      	beq.n	8000a8e <decreaseAfter1s+0x1a>
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	d012      	beq.n	8000ab2 <decreaseAfter1s+0x3e>
			count_yellow1[1] = 9;
			count_yellow1[0]--;
		}
		break;
	default:
		break;
 8000a8c:	e035      	b.n	8000afa <decreaseAfter1s+0x86>
		count_red1[1]--;
 8000a8e:	4b45      	ldr	r3, [pc, #276]	; (8000ba4 <decreaseAfter1s+0x130>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	3b01      	subs	r3, #1
 8000a94:	4a43      	ldr	r2, [pc, #268]	; (8000ba4 <decreaseAfter1s+0x130>)
 8000a96:	6053      	str	r3, [r2, #4]
		if(count_red1[1]< 0){
 8000a98:	4b42      	ldr	r3, [pc, #264]	; (8000ba4 <decreaseAfter1s+0x130>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	da2e      	bge.n	8000afe <decreaseAfter1s+0x8a>
			count_red1[1] = 9;
 8000aa0:	4b40      	ldr	r3, [pc, #256]	; (8000ba4 <decreaseAfter1s+0x130>)
 8000aa2:	2209      	movs	r2, #9
 8000aa4:	605a      	str	r2, [r3, #4]
			count_red1[0]--;
 8000aa6:	4b3f      	ldr	r3, [pc, #252]	; (8000ba4 <decreaseAfter1s+0x130>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	4a3d      	ldr	r2, [pc, #244]	; (8000ba4 <decreaseAfter1s+0x130>)
 8000aae:	6013      	str	r3, [r2, #0]
		break;
 8000ab0:	e025      	b.n	8000afe <decreaseAfter1s+0x8a>
		count_green1[1]--;
 8000ab2:	4b3d      	ldr	r3, [pc, #244]	; (8000ba8 <decreaseAfter1s+0x134>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	4a3b      	ldr	r2, [pc, #236]	; (8000ba8 <decreaseAfter1s+0x134>)
 8000aba:	6053      	str	r3, [r2, #4]
		if(count_green1[1]< 0){
 8000abc:	4b3a      	ldr	r3, [pc, #232]	; (8000ba8 <decreaseAfter1s+0x134>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	da1e      	bge.n	8000b02 <decreaseAfter1s+0x8e>
			count_green1[1] = 9;
 8000ac4:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <decreaseAfter1s+0x134>)
 8000ac6:	2209      	movs	r2, #9
 8000ac8:	605a      	str	r2, [r3, #4]
			count_green1[0]--;
 8000aca:	4b37      	ldr	r3, [pc, #220]	; (8000ba8 <decreaseAfter1s+0x134>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	4a35      	ldr	r2, [pc, #212]	; (8000ba8 <decreaseAfter1s+0x134>)
 8000ad2:	6013      	str	r3, [r2, #0]
		break;
 8000ad4:	e015      	b.n	8000b02 <decreaseAfter1s+0x8e>
		count_yellow1[1]--;
 8000ad6:	4b35      	ldr	r3, [pc, #212]	; (8000bac <decreaseAfter1s+0x138>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	4a33      	ldr	r2, [pc, #204]	; (8000bac <decreaseAfter1s+0x138>)
 8000ade:	6053      	str	r3, [r2, #4]
		if(count_yellow1[1]< 0){
 8000ae0:	4b32      	ldr	r3, [pc, #200]	; (8000bac <decreaseAfter1s+0x138>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	da0e      	bge.n	8000b06 <decreaseAfter1s+0x92>
			count_yellow1[1] = 9;
 8000ae8:	4b30      	ldr	r3, [pc, #192]	; (8000bac <decreaseAfter1s+0x138>)
 8000aea:	2209      	movs	r2, #9
 8000aec:	605a      	str	r2, [r3, #4]
			count_yellow1[0]--;
 8000aee:	4b2f      	ldr	r3, [pc, #188]	; (8000bac <decreaseAfter1s+0x138>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	4a2d      	ldr	r2, [pc, #180]	; (8000bac <decreaseAfter1s+0x138>)
 8000af6:	6013      	str	r3, [r2, #0]
		break;
 8000af8:	e005      	b.n	8000b06 <decreaseAfter1s+0x92>
		break;
 8000afa:	bf00      	nop
 8000afc:	e004      	b.n	8000b08 <decreaseAfter1s+0x94>
		break;
 8000afe:	bf00      	nop
 8000b00:	e002      	b.n	8000b08 <decreaseAfter1s+0x94>
		break;
 8000b02:	bf00      	nop
 8000b04:	e000      	b.n	8000b08 <decreaseAfter1s+0x94>
		break;
 8000b06:	bf00      	nop
	}

	switch(status2){
 8000b08:	4b29      	ldr	r3, [pc, #164]	; (8000bb0 <decreaseAfter1s+0x13c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b08      	cmp	r3, #8
 8000b0e:	d02a      	beq.n	8000b66 <decreaseAfter1s+0xf2>
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	dc3a      	bgt.n	8000b8a <decreaseAfter1s+0x116>
 8000b14:	2b06      	cmp	r3, #6
 8000b16:	d002      	beq.n	8000b1e <decreaseAfter1s+0xaa>
 8000b18:	2b07      	cmp	r3, #7
 8000b1a:	d012      	beq.n	8000b42 <decreaseAfter1s+0xce>
			count_yellow2[1] = 9;
			count_yellow2[0]--;
		}
		break;
	default:
		break;
 8000b1c:	e035      	b.n	8000b8a <decreaseAfter1s+0x116>
		count_red2[1]--;
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <decreaseAfter1s+0x140>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	4a23      	ldr	r2, [pc, #140]	; (8000bb4 <decreaseAfter1s+0x140>)
 8000b26:	6053      	str	r3, [r2, #4]
		if(count_red2[1]< 0){
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <decreaseAfter1s+0x140>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	da2e      	bge.n	8000b8e <decreaseAfter1s+0x11a>
			count_red2[1] = 9;
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <decreaseAfter1s+0x140>)
 8000b32:	2209      	movs	r2, #9
 8000b34:	605a      	str	r2, [r3, #4]
			count_red2[0]--;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <decreaseAfter1s+0x140>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	4a1d      	ldr	r2, [pc, #116]	; (8000bb4 <decreaseAfter1s+0x140>)
 8000b3e:	6013      	str	r3, [r2, #0]
		break;
 8000b40:	e025      	b.n	8000b8e <decreaseAfter1s+0x11a>
		count_green2[1]--;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <decreaseAfter1s+0x144>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	4a1b      	ldr	r2, [pc, #108]	; (8000bb8 <decreaseAfter1s+0x144>)
 8000b4a:	6053      	str	r3, [r2, #4]
		if(count_green2[1]< 0){
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <decreaseAfter1s+0x144>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	da1e      	bge.n	8000b92 <decreaseAfter1s+0x11e>
			count_green2[1] = 9;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <decreaseAfter1s+0x144>)
 8000b56:	2209      	movs	r2, #9
 8000b58:	605a      	str	r2, [r3, #4]
			count_green2[0]--;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <decreaseAfter1s+0x144>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <decreaseAfter1s+0x144>)
 8000b62:	6013      	str	r3, [r2, #0]
		break;
 8000b64:	e015      	b.n	8000b92 <decreaseAfter1s+0x11e>
		count_yellow2[1]--;
 8000b66:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <decreaseAfter1s+0x148>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	3b01      	subs	r3, #1
 8000b6c:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <decreaseAfter1s+0x148>)
 8000b6e:	6053      	str	r3, [r2, #4]
		if(count_yellow2[1]< 0){
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <decreaseAfter1s+0x148>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	da0e      	bge.n	8000b96 <decreaseAfter1s+0x122>
			count_yellow2[1] = 9;
 8000b78:	4b10      	ldr	r3, [pc, #64]	; (8000bbc <decreaseAfter1s+0x148>)
 8000b7a:	2209      	movs	r2, #9
 8000b7c:	605a      	str	r2, [r3, #4]
			count_yellow2[0]--;
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <decreaseAfter1s+0x148>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <decreaseAfter1s+0x148>)
 8000b86:	6013      	str	r3, [r2, #0]
		break;
 8000b88:	e005      	b.n	8000b96 <decreaseAfter1s+0x122>
		break;
 8000b8a:	bf00      	nop
 8000b8c:	e004      	b.n	8000b98 <decreaseAfter1s+0x124>
		break;
 8000b8e:	bf00      	nop
 8000b90:	e002      	b.n	8000b98 <decreaseAfter1s+0x124>
		break;
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <decreaseAfter1s+0x124>
		break;
 8000b96:	bf00      	nop
		}
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	200000c8 	.word	0x200000c8
 8000ba4:	20000094 	.word	0x20000094
 8000ba8:	2000009c 	.word	0x2000009c
 8000bac:	200000a4 	.word	0x200000a4
 8000bb0:	200000c4 	.word	0x200000c4
 8000bb4:	200000ac 	.word	0x200000ac
 8000bb8:	200000b4 	.word	0x200000b4
 8000bbc:	200000bc 	.word	0x200000bc

08000bc0 <checkEN>:
void checkEN(){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	switch(EN){
 8000bc4:	4ba5      	ldr	r3, [pc, #660]	; (8000e5c <checkEN+0x29c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b03      	cmp	r3, #3
 8000bca:	f200 8143 	bhi.w	8000e54 <checkEN+0x294>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <checkEN+0x14>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000be5 	.word	0x08000be5
 8000bd8:	08000c81 	.word	0x08000c81
 8000bdc:	08000d1d 	.word	0x08000d1d
 8000be0:	08000db9 	.word	0x08000db9
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bea:	489d      	ldr	r0, [pc, #628]	; (8000e60 <checkEN+0x2a0>)
 8000bec:	f001 fc39 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	489a      	ldr	r0, [pc, #616]	; (8000e60 <checkEN+0x2a0>)
 8000bf6:	f001 fc34 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	4898      	ldr	r0, [pc, #608]	; (8000e60 <checkEN+0x2a0>)
 8000c00:	f001 fc2f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c0a:	4895      	ldr	r0, [pc, #596]	; (8000e60 <checkEN+0x2a0>)
 8000c0c:	f001 fc29 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8000c10:	2200      	movs	r2, #0
 8000c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c16:	4892      	ldr	r0, [pc, #584]	; (8000e60 <checkEN+0x2a0>)
 8000c18:	f001 fc23 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c22:	488f      	ldr	r0, [pc, #572]	; (8000e60 <checkEN+0x2a0>)
 8000c24:	f001 fc1d 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2e:	488c      	ldr	r0, [pc, #560]	; (8000e60 <checkEN+0x2a0>)
 8000c30:	f001 fc17 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	488a      	ldr	r0, [pc, #552]	; (8000e64 <checkEN+0x2a4>)
 8000c3a:	f001 fc12 	bl	8002462 <HAL_GPIO_WritePin>
		if(status1 == RED1){
 8000c3e:	4b8a      	ldr	r3, [pc, #552]	; (8000e68 <checkEN+0x2a8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d105      	bne.n	8000c52 <checkEN+0x92>
			display7SEG(count_red1[0]);
 8000c46:	4b89      	ldr	r3, [pc, #548]	; (8000e6c <checkEN+0x2ac>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 fbf2 	bl	8001434 <display7SEG>
 8000c50:	e012      	b.n	8000c78 <checkEN+0xb8>
		}
		else if(status1 == GREEN1){
 8000c52:	4b85      	ldr	r3, [pc, #532]	; (8000e68 <checkEN+0x2a8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b03      	cmp	r3, #3
 8000c58:	d105      	bne.n	8000c66 <checkEN+0xa6>
			display7SEG(count_green1[0]);
 8000c5a:	4b85      	ldr	r3, [pc, #532]	; (8000e70 <checkEN+0x2b0>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f000 fbe8 	bl	8001434 <display7SEG>
 8000c64:	e008      	b.n	8000c78 <checkEN+0xb8>
		}
		else if(status1 == YELLOW1){
 8000c66:	4b80      	ldr	r3, [pc, #512]	; (8000e68 <checkEN+0x2a8>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d104      	bne.n	8000c78 <checkEN+0xb8>
			display7SEG(count_yellow1[0]);
 8000c6e:	4b81      	ldr	r3, [pc, #516]	; (8000e74 <checkEN+0x2b4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fbde 	bl	8001434 <display7SEG>
		}
		display7SEG1(0);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f000 fd73 	bl	8001764 <display7SEG1>
		break;
 8000c7e:	e0ea      	b.n	8000e56 <checkEN+0x296>
	case 1:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c86:	4876      	ldr	r0, [pc, #472]	; (8000e60 <checkEN+0x2a0>)
 8000c88:	f001 fbeb 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2140      	movs	r1, #64	; 0x40
 8000c90:	4873      	ldr	r0, [pc, #460]	; (8000e60 <checkEN+0x2a0>)
 8000c92:	f001 fbe6 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2180      	movs	r1, #128	; 0x80
 8000c9a:	4871      	ldr	r0, [pc, #452]	; (8000e60 <checkEN+0x2a0>)
 8000c9c:	f001 fbe1 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca6:	486e      	ldr	r0, [pc, #440]	; (8000e60 <checkEN+0x2a0>)
 8000ca8:	f001 fbdb 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000cac:	2201      	movs	r2, #1
 8000cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cb2:	486b      	ldr	r0, [pc, #428]	; (8000e60 <checkEN+0x2a0>)
 8000cb4:	f001 fbd5 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cbe:	4868      	ldr	r0, [pc, #416]	; (8000e60 <checkEN+0x2a0>)
 8000cc0:	f001 fbcf 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cca:	4865      	ldr	r0, [pc, #404]	; (8000e60 <checkEN+0x2a0>)
 8000ccc:	f001 fbc9 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	4863      	ldr	r0, [pc, #396]	; (8000e64 <checkEN+0x2a4>)
 8000cd6:	f001 fbc4 	bl	8002462 <HAL_GPIO_WritePin>
		if(status1 == RED1){
 8000cda:	4b63      	ldr	r3, [pc, #396]	; (8000e68 <checkEN+0x2a8>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d105      	bne.n	8000cee <checkEN+0x12e>
			display7SEG(count_red1[1]);
 8000ce2:	4b62      	ldr	r3, [pc, #392]	; (8000e6c <checkEN+0x2ac>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fba4 	bl	8001434 <display7SEG>
 8000cec:	e012      	b.n	8000d14 <checkEN+0x154>
		}
		else if(status1 == GREEN1){
 8000cee:	4b5e      	ldr	r3, [pc, #376]	; (8000e68 <checkEN+0x2a8>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d105      	bne.n	8000d02 <checkEN+0x142>
			display7SEG(count_green1[1]);
 8000cf6:	4b5e      	ldr	r3, [pc, #376]	; (8000e70 <checkEN+0x2b0>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 fb9a 	bl	8001434 <display7SEG>
 8000d00:	e008      	b.n	8000d14 <checkEN+0x154>
		}
		else if(status1 == YELLOW1){
 8000d02:	4b59      	ldr	r3, [pc, #356]	; (8000e68 <checkEN+0x2a8>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b04      	cmp	r3, #4
 8000d08:	d104      	bne.n	8000d14 <checkEN+0x154>
			display7SEG(count_yellow1[1]);
 8000d0a:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <checkEN+0x2b4>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fb90 	bl	8001434 <display7SEG>
		}
		display7SEG1(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f000 fd25 	bl	8001764 <display7SEG1>
		break;
 8000d1a:	e09c      	b.n	8000e56 <checkEN+0x296>
	case 2:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d22:	484f      	ldr	r0, [pc, #316]	; (8000e60 <checkEN+0x2a0>)
 8000d24:	f001 fb9d 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2140      	movs	r1, #64	; 0x40
 8000d2c:	484c      	ldr	r0, [pc, #304]	; (8000e60 <checkEN+0x2a0>)
 8000d2e:	f001 fb98 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	484a      	ldr	r0, [pc, #296]	; (8000e60 <checkEN+0x2a0>)
 8000d38:	f001 fb93 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d42:	4847      	ldr	r0, [pc, #284]	; (8000e60 <checkEN+0x2a0>)
 8000d44:	f001 fb8d 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4e:	4844      	ldr	r0, [pc, #272]	; (8000e60 <checkEN+0x2a0>)
 8000d50:	f001 fb87 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5a:	4841      	ldr	r0, [pc, #260]	; (8000e60 <checkEN+0x2a0>)
 8000d5c:	f001 fb81 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d66:	483e      	ldr	r0, [pc, #248]	; (8000e60 <checkEN+0x2a0>)
 8000d68:	f001 fb7b 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2102      	movs	r1, #2
 8000d70:	483c      	ldr	r0, [pc, #240]	; (8000e64 <checkEN+0x2a4>)
 8000d72:	f001 fb76 	bl	8002462 <HAL_GPIO_WritePin>
		if(status2 == RED2){
 8000d76:	4b40      	ldr	r3, [pc, #256]	; (8000e78 <checkEN+0x2b8>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	d105      	bne.n	8000d8a <checkEN+0x1ca>
			display7SEG(count_red2[0]);
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <checkEN+0x2bc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fb56 	bl	8001434 <display7SEG>
 8000d88:	e012      	b.n	8000db0 <checkEN+0x1f0>
		}
		else if(status2 == GREEN2){
 8000d8a:	4b3b      	ldr	r3, [pc, #236]	; (8000e78 <checkEN+0x2b8>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b07      	cmp	r3, #7
 8000d90:	d105      	bne.n	8000d9e <checkEN+0x1de>
			display7SEG(count_green2[0]);
 8000d92:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <checkEN+0x2c0>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fb4c 	bl	8001434 <display7SEG>
 8000d9c:	e008      	b.n	8000db0 <checkEN+0x1f0>
		}
		else if(status2 == YELLOW2){
 8000d9e:	4b36      	ldr	r3, [pc, #216]	; (8000e78 <checkEN+0x2b8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d104      	bne.n	8000db0 <checkEN+0x1f0>
			display7SEG(count_yellow2[0]);
 8000da6:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <checkEN+0x2c4>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f000 fb42 	bl	8001434 <display7SEG>
		}
		display7SEG1(0);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f000 fcd7 	bl	8001764 <display7SEG1>
		break;
 8000db6:	e04e      	b.n	8000e56 <checkEN+0x296>
	case 3:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbe:	4828      	ldr	r0, [pc, #160]	; (8000e60 <checkEN+0x2a0>)
 8000dc0:	f001 fb4f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	2140      	movs	r1, #64	; 0x40
 8000dc8:	4825      	ldr	r0, [pc, #148]	; (8000e60 <checkEN+0x2a0>)
 8000dca:	f001 fb4a 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	4823      	ldr	r0, [pc, #140]	; (8000e60 <checkEN+0x2a0>)
 8000dd4:	f001 fb45 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dde:	4820      	ldr	r0, [pc, #128]	; (8000e60 <checkEN+0x2a0>)
 8000de0:	f001 fb3f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dea:	481d      	ldr	r0, [pc, #116]	; (8000e60 <checkEN+0x2a0>)
 8000dec:	f001 fb39 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, RESET);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df6:	481a      	ldr	r0, [pc, #104]	; (8000e60 <checkEN+0x2a0>)
 8000df8:	f001 fb33 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN6_GPIO_Port, EN6_Pin, SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e02:	4817      	ldr	r0, [pc, #92]	; (8000e60 <checkEN+0x2a0>)
 8000e04:	f001 fb2d 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN7_GPIO_Port, EN7_Pin, SET);
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4815      	ldr	r0, [pc, #84]	; (8000e64 <checkEN+0x2a4>)
 8000e0e:	f001 fb28 	bl	8002462 <HAL_GPIO_WritePin>
		if(status2 == RED2){
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <checkEN+0x2b8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2b06      	cmp	r3, #6
 8000e18:	d105      	bne.n	8000e26 <checkEN+0x266>
			display7SEG(count_red2[1]);
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <checkEN+0x2bc>)
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fb08 	bl	8001434 <display7SEG>
 8000e24:	e012      	b.n	8000e4c <checkEN+0x28c>
		}
		else if(status2 == GREEN2){
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <checkEN+0x2b8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b07      	cmp	r3, #7
 8000e2c:	d105      	bne.n	8000e3a <checkEN+0x27a>
			display7SEG(count_green2[1]);
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <checkEN+0x2c0>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fafe 	bl	8001434 <display7SEG>
 8000e38:	e008      	b.n	8000e4c <checkEN+0x28c>
		}
		else if(status2 == YELLOW2){
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <checkEN+0x2b8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d104      	bne.n	8000e4c <checkEN+0x28c>
			display7SEG(count_yellow2[1]);
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <checkEN+0x2c4>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 faf4 	bl	8001434 <display7SEG>
		}
		display7SEG1(1);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f000 fc89 	bl	8001764 <display7SEG1>
		break;
 8000e52:	e000      	b.n	8000e56 <checkEN+0x296>
	default:
		break;
 8000e54:	bf00      	nop
	}
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000cc 	.word	0x200000cc
 8000e60:	40010c00 	.word	0x40010c00
 8000e64:	40010800 	.word	0x40010800
 8000e68:	200000c8 	.word	0x200000c8
 8000e6c:	20000094 	.word	0x20000094
 8000e70:	2000009c 	.word	0x2000009c
 8000e74:	200000a4 	.word	0x200000a4
 8000e78:	200000c4 	.word	0x200000c4
 8000e7c:	200000ac 	.word	0x200000ac
 8000e80:	200000b4 	.word	0x200000b4
 8000e84:	200000bc 	.word	0x200000bc

08000e88 <fsm_auto_run>:

void fsm_auto_run(){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	// red green yellow 1
	switch(status1){
 8000e8c:	4ba0      	ldr	r3, [pc, #640]	; (8001110 <fsm_auto_run+0x288>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	f200 80a9 	bhi.w	8000fea <fsm_auto_run+0x162>
 8000e98:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <fsm_auto_run+0x18>)
 8000e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9e:	bf00      	nop
 8000ea0:	08000eb1 	.word	0x08000eb1
 8000ea4:	08000f19 	.word	0x08000f19
 8000ea8:	08000f5f 	.word	0x08000f5f
 8000eac:	08000fa5 	.word	0x08000fa5
		case INIT1:
			HAL_GPIO_WritePin(Led_Red1_GPIO_Port,Led_Red1_Pin, 1);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4897      	ldr	r0, [pc, #604]	; (8001114 <fsm_auto_run+0x28c>)
 8000eb6:	f001 fad4 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green1_GPIO_Port,Led_Green1_Pin, 1);
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2102      	movs	r1, #2
 8000ebe:	4895      	ldr	r0, [pc, #596]	; (8001114 <fsm_auto_run+0x28c>)
 8000ec0:	f001 facf 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow1_GPIO_Port,Led_Yellow1_Pin, 1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	4892      	ldr	r0, [pc, #584]	; (8001114 <fsm_auto_run+0x28c>)
 8000eca:	f001 faca 	bl	8002462 <HAL_GPIO_WritePin>
			status1= RED1;
 8000ece:	4b90      	ldr	r3, [pc, #576]	; (8001110 <fsm_auto_run+0x288>)
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	601a      	str	r2, [r3, #0]
			setTimer1(red_time*1000);
 8000ed4:	4b90      	ldr	r3, [pc, #576]	; (8001118 <fsm_auto_run+0x290>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000edc:	fb02 f303 	mul.w	r3, r2, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fe1d 	bl	8001b20 <setTimer1>
			count_red1[0] = led_buffer_red[0];
 8000ee6:	4b8d      	ldr	r3, [pc, #564]	; (800111c <fsm_auto_run+0x294>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a8d      	ldr	r2, [pc, #564]	; (8001120 <fsm_auto_run+0x298>)
 8000eec:	6013      	str	r3, [r2, #0]
			count_red1[1] = led_buffer_red[1];
 8000eee:	4b8b      	ldr	r3, [pc, #556]	; (800111c <fsm_auto_run+0x294>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	4a8b      	ldr	r2, [pc, #556]	; (8001120 <fsm_auto_run+0x298>)
 8000ef4:	6053      	str	r3, [r2, #4]
			count_green1[0] = led_buffer_green[0];
 8000ef6:	4b8b      	ldr	r3, [pc, #556]	; (8001124 <fsm_auto_run+0x29c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a8b      	ldr	r2, [pc, #556]	; (8001128 <fsm_auto_run+0x2a0>)
 8000efc:	6013      	str	r3, [r2, #0]
			count_green1[1] = led_buffer_green[1];
 8000efe:	4b89      	ldr	r3, [pc, #548]	; (8001124 <fsm_auto_run+0x29c>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	4a89      	ldr	r2, [pc, #548]	; (8001128 <fsm_auto_run+0x2a0>)
 8000f04:	6053      	str	r3, [r2, #4]
			count_yellow1[0] = led_buffer_yellow[0];
 8000f06:	4b89      	ldr	r3, [pc, #548]	; (800112c <fsm_auto_run+0x2a4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a89      	ldr	r2, [pc, #548]	; (8001130 <fsm_auto_run+0x2a8>)
 8000f0c:	6013      	str	r3, [r2, #0]
			count_yellow1[1] = led_buffer_yellow[1];
 8000f0e:	4b87      	ldr	r3, [pc, #540]	; (800112c <fsm_auto_run+0x2a4>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	4a87      	ldr	r2, [pc, #540]	; (8001130 <fsm_auto_run+0x2a8>)
 8000f14:	6053      	str	r3, [r2, #4]
			break;
 8000f16:	e06f      	b.n	8000ff8 <fsm_auto_run+0x170>
		case RED1:
			// led red1 0
			HAL_GPIO_WritePin(Led_Red1_GPIO_Port,Led_Red1_Pin, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	487d      	ldr	r0, [pc, #500]	; (8001114 <fsm_auto_run+0x28c>)
 8000f1e:	f001 faa0 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green1_GPIO_Port,Led_Green1_Pin, 1);
 8000f22:	2201      	movs	r2, #1
 8000f24:	2102      	movs	r1, #2
 8000f26:	487b      	ldr	r0, [pc, #492]	; (8001114 <fsm_auto_run+0x28c>)
 8000f28:	f001 fa9b 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow1_GPIO_Port,Led_Yellow1_Pin, 1);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2104      	movs	r1, #4
 8000f30:	4878      	ldr	r0, [pc, #480]	; (8001114 <fsm_auto_run+0x28c>)
 8000f32:	f001 fa96 	bl	8002462 <HAL_GPIO_WritePin>
			//if(timer1_flag == 1){
				//status1 = GREEN1;
				//setTimer1(green_time*1000);
			//}
			if (count_red1[0] == 0 && count_red1[1] == 0) {
 8000f36:	4b7a      	ldr	r3, [pc, #488]	; (8001120 <fsm_auto_run+0x298>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d157      	bne.n	8000fee <fsm_auto_run+0x166>
 8000f3e:	4b78      	ldr	r3, [pc, #480]	; (8001120 <fsm_auto_run+0x298>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d153      	bne.n	8000fee <fsm_auto_run+0x166>
				status1 = GREEN1;
 8000f46:	4b72      	ldr	r3, [pc, #456]	; (8001110 <fsm_auto_run+0x288>)
 8000f48:	2203      	movs	r2, #3
 8000f4a:	601a      	str	r2, [r3, #0]
				count_red1[0] = led_buffer_red[0];
 8000f4c:	4b73      	ldr	r3, [pc, #460]	; (800111c <fsm_auto_run+0x294>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a73      	ldr	r2, [pc, #460]	; (8001120 <fsm_auto_run+0x298>)
 8000f52:	6013      	str	r3, [r2, #0]
				count_red1[1] = led_buffer_red[1];
 8000f54:	4b71      	ldr	r3, [pc, #452]	; (800111c <fsm_auto_run+0x294>)
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4a71      	ldr	r2, [pc, #452]	; (8001120 <fsm_auto_run+0x298>)
 8000f5a:	6053      	str	r3, [r2, #4]
			}
			break;
 8000f5c:	e047      	b.n	8000fee <fsm_auto_run+0x166>
		case GREEN1:
			// led green1 0
			HAL_GPIO_WritePin(Led_Red1_GPIO_Port,Led_Red1_Pin, 1);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2101      	movs	r1, #1
 8000f62:	486c      	ldr	r0, [pc, #432]	; (8001114 <fsm_auto_run+0x28c>)
 8000f64:	f001 fa7d 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green1_GPIO_Port,Led_Green1_Pin, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4869      	ldr	r0, [pc, #420]	; (8001114 <fsm_auto_run+0x28c>)
 8000f6e:	f001 fa78 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow1_GPIO_Port,Led_Yellow1_Pin, 1);
 8000f72:	2201      	movs	r2, #1
 8000f74:	2104      	movs	r1, #4
 8000f76:	4867      	ldr	r0, [pc, #412]	; (8001114 <fsm_auto_run+0x28c>)
 8000f78:	f001 fa73 	bl	8002462 <HAL_GPIO_WritePin>
			//if(timer1_flag == 1){
				//status1 = YELLOW1;
				//setTimer1(yellow_time* 1000);
			//}
			if (count_green1[0] == 0 && count_green1[1] == 0) {
 8000f7c:	4b6a      	ldr	r3, [pc, #424]	; (8001128 <fsm_auto_run+0x2a0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d136      	bne.n	8000ff2 <fsm_auto_run+0x16a>
 8000f84:	4b68      	ldr	r3, [pc, #416]	; (8001128 <fsm_auto_run+0x2a0>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d132      	bne.n	8000ff2 <fsm_auto_run+0x16a>
				status1 = YELLOW1;
 8000f8c:	4b60      	ldr	r3, [pc, #384]	; (8001110 <fsm_auto_run+0x288>)
 8000f8e:	2204      	movs	r2, #4
 8000f90:	601a      	str	r2, [r3, #0]
				count_green1[0] = led_buffer_green[0];
 8000f92:	4b64      	ldr	r3, [pc, #400]	; (8001124 <fsm_auto_run+0x29c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a64      	ldr	r2, [pc, #400]	; (8001128 <fsm_auto_run+0x2a0>)
 8000f98:	6013      	str	r3, [r2, #0]
				count_green1[1] = led_buffer_green[1];
 8000f9a:	4b62      	ldr	r3, [pc, #392]	; (8001124 <fsm_auto_run+0x29c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4a62      	ldr	r2, [pc, #392]	; (8001128 <fsm_auto_run+0x2a0>)
 8000fa0:	6053      	str	r3, [r2, #4]
			}
			break;
 8000fa2:	e026      	b.n	8000ff2 <fsm_auto_run+0x16a>
		case YELLOW1:
			HAL_GPIO_WritePin(Led_Red1_GPIO_Port,Led_Red1_Pin, 1);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	485a      	ldr	r0, [pc, #360]	; (8001114 <fsm_auto_run+0x28c>)
 8000faa:	f001 fa5a 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green1_GPIO_Port,Led_Green1_Pin, 1);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4858      	ldr	r0, [pc, #352]	; (8001114 <fsm_auto_run+0x28c>)
 8000fb4:	f001 fa55 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow1_GPIO_Port,Led_Yellow1_Pin, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4855      	ldr	r0, [pc, #340]	; (8001114 <fsm_auto_run+0x28c>)
 8000fbe:	f001 fa50 	bl	8002462 <HAL_GPIO_WritePin>
			//if(timer1_flag == 1){
				//status1 = RED1;
				//setTimer1(red_time* 1000);
			//}
			if (count_yellow1[0] == 0 && count_yellow1[1] == 0) {
 8000fc2:	4b5b      	ldr	r3, [pc, #364]	; (8001130 <fsm_auto_run+0x2a8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d115      	bne.n	8000ff6 <fsm_auto_run+0x16e>
 8000fca:	4b59      	ldr	r3, [pc, #356]	; (8001130 <fsm_auto_run+0x2a8>)
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d111      	bne.n	8000ff6 <fsm_auto_run+0x16e>
				status1 = RED1;
 8000fd2:	4b4f      	ldr	r3, [pc, #316]	; (8001110 <fsm_auto_run+0x288>)
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	601a      	str	r2, [r3, #0]
				count_yellow1[0] = led_buffer_yellow[0];
 8000fd8:	4b54      	ldr	r3, [pc, #336]	; (800112c <fsm_auto_run+0x2a4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a54      	ldr	r2, [pc, #336]	; (8001130 <fsm_auto_run+0x2a8>)
 8000fde:	6013      	str	r3, [r2, #0]
				count_yellow1[1] = led_buffer_yellow[1];
 8000fe0:	4b52      	ldr	r3, [pc, #328]	; (800112c <fsm_auto_run+0x2a4>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	4a52      	ldr	r2, [pc, #328]	; (8001130 <fsm_auto_run+0x2a8>)
 8000fe6:	6053      	str	r3, [r2, #4]
			}
			break;
 8000fe8:	e005      	b.n	8000ff6 <fsm_auto_run+0x16e>
		default:
			break;
 8000fea:	bf00      	nop
 8000fec:	e004      	b.n	8000ff8 <fsm_auto_run+0x170>
			break;
 8000fee:	bf00      	nop
 8000ff0:	e002      	b.n	8000ff8 <fsm_auto_run+0x170>
			break;
 8000ff2:	bf00      	nop
 8000ff4:	e000      	b.n	8000ff8 <fsm_auto_run+0x170>
			break;
 8000ff6:	bf00      	nop
	}
	// red green yellow 2
	switch(status2){
 8000ff8:	4b4e      	ldr	r3, [pc, #312]	; (8001134 <fsm_auto_run+0x2ac>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	3b05      	subs	r3, #5
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	f200 80c5 	bhi.w	800118e <fsm_auto_run+0x306>
 8001004:	a201      	add	r2, pc, #4	; (adr r2, 800100c <fsm_auto_run+0x184>)
 8001006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800100a:	bf00      	nop
 800100c:	0800101d 	.word	0x0800101d
 8001010:	08001085 	.word	0x08001085
 8001014:	080010cb 	.word	0x080010cb
 8001018:	08001149 	.word	0x08001149
		case INIT2:
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port,Led_Red2_Pin, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	2108      	movs	r1, #8
 8001020:	483c      	ldr	r0, [pc, #240]	; (8001114 <fsm_auto_run+0x28c>)
 8001022:	f001 fa1e 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port,Led_Green2_Pin, 1);
 8001026:	2201      	movs	r2, #1
 8001028:	2110      	movs	r1, #16
 800102a:	483a      	ldr	r0, [pc, #232]	; (8001114 <fsm_auto_run+0x28c>)
 800102c:	f001 fa19 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port,Led_Yellow2_Pin, 1);
 8001030:	2201      	movs	r2, #1
 8001032:	2120      	movs	r1, #32
 8001034:	4837      	ldr	r0, [pc, #220]	; (8001114 <fsm_auto_run+0x28c>)
 8001036:	f001 fa14 	bl	8002462 <HAL_GPIO_WritePin>
			status2 = GREEN2;
 800103a:	4b3e      	ldr	r3, [pc, #248]	; (8001134 <fsm_auto_run+0x2ac>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
			setTimer2(green_time*1000);
 8001040:	4b3d      	ldr	r3, [pc, #244]	; (8001138 <fsm_auto_run+0x2b0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fd81 	bl	8001b54 <setTimer2>
			count_red2[0] = led_buffer_red[0];
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <fsm_auto_run+0x294>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a39      	ldr	r2, [pc, #228]	; (800113c <fsm_auto_run+0x2b4>)
 8001058:	6013      	str	r3, [r2, #0]
			count_red2[1] = led_buffer_red[1];
 800105a:	4b30      	ldr	r3, [pc, #192]	; (800111c <fsm_auto_run+0x294>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a37      	ldr	r2, [pc, #220]	; (800113c <fsm_auto_run+0x2b4>)
 8001060:	6053      	str	r3, [r2, #4]
			count_green2[0] = led_buffer_green[0];
 8001062:	4b30      	ldr	r3, [pc, #192]	; (8001124 <fsm_auto_run+0x29c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a36      	ldr	r2, [pc, #216]	; (8001140 <fsm_auto_run+0x2b8>)
 8001068:	6013      	str	r3, [r2, #0]
			count_green2[1] = led_buffer_green[1];
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <fsm_auto_run+0x29c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4a34      	ldr	r2, [pc, #208]	; (8001140 <fsm_auto_run+0x2b8>)
 8001070:	6053      	str	r3, [r2, #4]
			count_yellow2[0] = led_buffer_yellow[0];
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <fsm_auto_run+0x2a4>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a33      	ldr	r2, [pc, #204]	; (8001144 <fsm_auto_run+0x2bc>)
 8001078:	6013      	str	r3, [r2, #0]
			count_yellow2[1] = led_buffer_yellow[1];
 800107a:	4b2c      	ldr	r3, [pc, #176]	; (800112c <fsm_auto_run+0x2a4>)
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a31      	ldr	r2, [pc, #196]	; (8001144 <fsm_auto_run+0x2bc>)
 8001080:	6053      	str	r3, [r2, #4]
			break;
 8001082:	e08b      	b.n	800119c <fsm_auto_run+0x314>
		case RED2:
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port,Led_Red2_Pin, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2108      	movs	r1, #8
 8001088:	4822      	ldr	r0, [pc, #136]	; (8001114 <fsm_auto_run+0x28c>)
 800108a:	f001 f9ea 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port,Led_Green2_Pin, 1);
 800108e:	2201      	movs	r2, #1
 8001090:	2110      	movs	r1, #16
 8001092:	4820      	ldr	r0, [pc, #128]	; (8001114 <fsm_auto_run+0x28c>)
 8001094:	f001 f9e5 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port,Led_Yellow2_Pin, 1);
 8001098:	2201      	movs	r2, #1
 800109a:	2120      	movs	r1, #32
 800109c:	481d      	ldr	r0, [pc, #116]	; (8001114 <fsm_auto_run+0x28c>)
 800109e:	f001 f9e0 	bl	8002462 <HAL_GPIO_WritePin>
			//if(timer2_flag == 1){
				//setTimer2(green_time * 1000);
				//status2 = GREEN2;
			//}
			if (count_red2[0] == 0 && count_red2[1] == 0) {
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <fsm_auto_run+0x2b4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d173      	bne.n	8001192 <fsm_auto_run+0x30a>
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <fsm_auto_run+0x2b4>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d16f      	bne.n	8001192 <fsm_auto_run+0x30a>
				status2 = GREEN2;
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <fsm_auto_run+0x2ac>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
				count_red2[0] = led_buffer_red[0];
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <fsm_auto_run+0x294>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a1f      	ldr	r2, [pc, #124]	; (800113c <fsm_auto_run+0x2b4>)
 80010be:	6013      	str	r3, [r2, #0]
				count_red2[1] = led_buffer_red[1];
 80010c0:	4b16      	ldr	r3, [pc, #88]	; (800111c <fsm_auto_run+0x294>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4a1d      	ldr	r2, [pc, #116]	; (800113c <fsm_auto_run+0x2b4>)
 80010c6:	6053      	str	r3, [r2, #4]
			}
			break;
 80010c8:	e063      	b.n	8001192 <fsm_auto_run+0x30a>
		case GREEN2:
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port,Led_Red2_Pin, 1);
 80010ca:	2201      	movs	r2, #1
 80010cc:	2108      	movs	r1, #8
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <fsm_auto_run+0x28c>)
 80010d0:	f001 f9c7 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port,Led_Green2_Pin, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2110      	movs	r1, #16
 80010d8:	480e      	ldr	r0, [pc, #56]	; (8001114 <fsm_auto_run+0x28c>)
 80010da:	f001 f9c2 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port,Led_Yellow2_Pin, 1);
 80010de:	2201      	movs	r2, #1
 80010e0:	2120      	movs	r1, #32
 80010e2:	480c      	ldr	r0, [pc, #48]	; (8001114 <fsm_auto_run+0x28c>)
 80010e4:	f001 f9bd 	bl	8002462 <HAL_GPIO_WritePin>
			//if(timer2_flag == 1){
				//setTimer2(yellow_time * 1000);
				//status2 = YELLOW2;
			//}
			if (count_green2[0] == 0 && count_green2[1] == 0) {
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <fsm_auto_run+0x2b8>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d152      	bne.n	8001196 <fsm_auto_run+0x30e>
 80010f0:	4b13      	ldr	r3, [pc, #76]	; (8001140 <fsm_auto_run+0x2b8>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d14e      	bne.n	8001196 <fsm_auto_run+0x30e>
				status2 = YELLOW2;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <fsm_auto_run+0x2ac>)
 80010fa:	2208      	movs	r2, #8
 80010fc:	601a      	str	r2, [r3, #0]
				count_green2[0] = led_buffer_green[0];
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <fsm_auto_run+0x29c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <fsm_auto_run+0x2b8>)
 8001104:	6013      	str	r3, [r2, #0]
				count_green2[1] = led_buffer_green[1];
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <fsm_auto_run+0x29c>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <fsm_auto_run+0x2b8>)
 800110c:	6053      	str	r3, [r2, #4]
			}
			break;
 800110e:	e042      	b.n	8001196 <fsm_auto_run+0x30e>
 8001110:	200000c8 	.word	0x200000c8
 8001114:	40010c00 	.word	0x40010c00
 8001118:	20000038 	.word	0x20000038
 800111c:	20000044 	.word	0x20000044
 8001120:	20000094 	.word	0x20000094
 8001124:	2000004c 	.word	0x2000004c
 8001128:	2000009c 	.word	0x2000009c
 800112c:	20000054 	.word	0x20000054
 8001130:	200000a4 	.word	0x200000a4
 8001134:	200000c4 	.word	0x200000c4
 8001138:	2000003c 	.word	0x2000003c
 800113c:	200000ac 	.word	0x200000ac
 8001140:	200000b4 	.word	0x200000b4
 8001144:	200000bc 	.word	0x200000bc
		case YELLOW2:
			HAL_GPIO_WritePin(Led_Red2_GPIO_Port,Led_Red2_Pin, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	2108      	movs	r1, #8
 800114c:	4820      	ldr	r0, [pc, #128]	; (80011d0 <fsm_auto_run+0x348>)
 800114e:	f001 f988 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Green2_GPIO_Port,Led_Green2_Pin, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	2110      	movs	r1, #16
 8001156:	481e      	ldr	r0, [pc, #120]	; (80011d0 <fsm_auto_run+0x348>)
 8001158:	f001 f983 	bl	8002462 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Led_Yellow2_GPIO_Port,Led_Yellow2_Pin, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2120      	movs	r1, #32
 8001160:	481b      	ldr	r0, [pc, #108]	; (80011d0 <fsm_auto_run+0x348>)
 8001162:	f001 f97e 	bl	8002462 <HAL_GPIO_WritePin>
			//if(timer2_flag == 1){
				//setTimer2(red_time * 1000);
				//status2 = RED2;
			//}
			if (count_yellow2[0] == 0 && count_yellow2[1] == 0) {
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <fsm_auto_run+0x34c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d115      	bne.n	800119a <fsm_auto_run+0x312>
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <fsm_auto_run+0x34c>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d111      	bne.n	800119a <fsm_auto_run+0x312>
				status2 = RED2;
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <fsm_auto_run+0x350>)
 8001178:	2206      	movs	r2, #6
 800117a:	601a      	str	r2, [r3, #0]
				count_yellow2[0] = led_buffer_yellow[0];
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <fsm_auto_run+0x354>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <fsm_auto_run+0x34c>)
 8001182:	6013      	str	r3, [r2, #0]
				count_yellow2[1] = led_buffer_yellow[1];
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <fsm_auto_run+0x354>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	4a12      	ldr	r2, [pc, #72]	; (80011d4 <fsm_auto_run+0x34c>)
 800118a:	6053      	str	r3, [r2, #4]
			}
			break;
 800118c:	e005      	b.n	800119a <fsm_auto_run+0x312>
		default:
			break;
 800118e:	bf00      	nop
 8001190:	e004      	b.n	800119c <fsm_auto_run+0x314>
			break;
 8001192:	bf00      	nop
 8001194:	e002      	b.n	800119c <fsm_auto_run+0x314>
			break;
 8001196:	bf00      	nop
 8001198:	e000      	b.n	800119c <fsm_auto_run+0x314>
			break;
 800119a:	bf00      	nop
	}
	checkEN();
 800119c:	f7ff fd10 	bl	8000bc0 <checkEN>
	if(timer4_flag == 1){
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <fsm_auto_run+0x358>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d110      	bne.n	80011ca <fsm_auto_run+0x342>
		EN++;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <fsm_auto_run+0x35c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4a0d      	ldr	r2, [pc, #52]	; (80011e4 <fsm_auto_run+0x35c>)
 80011b0:	6013      	str	r3, [r2, #0]
		if(EN > 3){
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <fsm_auto_run+0x35c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	dd04      	ble.n	80011c4 <fsm_auto_run+0x33c>
			EN = 0;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <fsm_auto_run+0x35c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
			decreaseAfter1s();
 80011c0:	f7ff fc58 	bl	8000a74 <decreaseAfter1s>
		}
		setTimer4(250);
 80011c4:	20fa      	movs	r0, #250	; 0xfa
 80011c6:	f000 fcf9 	bl	8001bbc <setTimer4>
	}
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40010c00 	.word	0x40010c00
 80011d4:	200000bc 	.word	0x200000bc
 80011d8:	200000c4 	.word	0x200000c4
 80011dc:	20000054 	.word	0x20000054
 80011e0:	200000ec 	.word	0x200000ec
 80011e4:	200000cc 	.word	0x200000cc

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f000 fe38 	bl	8001e60 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f828 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f000 f8ae 	bl	8001354 <MX_GPIO_Init>
  MX_TIM2_Init();
 80011f8:	f000 f860 	bl	80012bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 80011fc:	480c      	ldr	r0, [pc, #48]	; (8001230 <main+0x48>)
 80011fe:	f001 fd99 	bl	8002d34 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mode = INIT;
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <main+0x4c>)
 8001204:	220a      	movs	r2, #10
 8001206:	601a      	str	r2, [r3, #0]
  status1 = INIT1;
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <main+0x50>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
  status2 = INIT2;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <main+0x54>)
 8001210:	2205      	movs	r2, #5
 8001212:	601a      	str	r2, [r3, #0]
  setTimer3(2000);
 8001214:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001218:	f000 fcb6 	bl	8001b88 <setTimer3>
  setTimer4(250);
 800121c:	20fa      	movs	r0, #250	; 0xfa
 800121e:	f000 fccd 	bl	8001bbc <setTimer4>
  EN = 0;
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <main+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //fsm_auto_run();
	  checkMode();
 8001228:	f7ff fa34 	bl	8000694 <checkMode>
 800122c:	e7fc      	b.n	8001228 <main+0x40>
 800122e:	bf00      	nop
 8001230:	200000fc 	.word	0x200000fc
 8001234:	20000034 	.word	0x20000034
 8001238:	200000c8 	.word	0x200000c8
 800123c:	200000c4 	.word	0x200000c4
 8001240:	200000cc 	.word	0x200000cc

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b090      	sub	sp, #64	; 0x40
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0318 	add.w	r3, r7, #24
 800124e:	2228      	movs	r2, #40	; 0x28
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f002 f926 	bl	80034a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	1d3b      	adds	r3, r7, #4
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001266:	2302      	movs	r3, #2
 8001268:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800126a:	2301      	movs	r3, #1
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800126e:	2310      	movs	r3, #16
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001272:	2300      	movs	r3, #0
 8001274:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	f107 0318 	add.w	r3, r7, #24
 800127a:	4618      	mov	r0, r3
 800127c:	f001 f922 	bl	80024c4 <HAL_RCC_OscConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001286:	f000 fc45 	bl	8001b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f001 fb8e 	bl	80029c4 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ae:	f000 fc31 	bl	8001b14 <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3740      	adds	r7, #64	; 0x40
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_TIM2_Init+0x94>)
 80012da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012e0:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <MX_TIM2_Init+0x94>)
 80012e2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_TIM2_Init+0x94>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9 ;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_TIM2_Init+0x94>)
 80012f0:	2209      	movs	r2, #9
 80012f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_TIM2_Init+0x94>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <MX_TIM2_Init+0x94>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001300:	4813      	ldr	r0, [pc, #76]	; (8001350 <MX_TIM2_Init+0x94>)
 8001302:	f001 fcc7 	bl	8002c94 <HAL_TIM_Base_Init>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800130c:	f000 fc02 	bl	8001b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001316:	f107 0308 	add.w	r3, r7, #8
 800131a:	4619      	mov	r1, r3
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <MX_TIM2_Init+0x94>)
 800131e:	f001 fe5d 	bl	8002fdc <HAL_TIM_ConfigClockSource>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001328:	f000 fbf4 	bl	8001b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_TIM2_Init+0x94>)
 800133a:	f002 f825 	bl	8003388 <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001344:	f000 fbe6 	bl	8001b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200000fc 	.word	0x200000fc

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <MX_GPIO_Init+0xbc>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	4a28      	ldr	r2, [pc, #160]	; (8001410 <MX_GPIO_Init+0xbc>)
 800136e:	f043 0304 	orr.w	r3, r3, #4
 8001372:	6193      	str	r3, [r2, #24]
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <MX_GPIO_Init+0xbc>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	f003 0304 	and.w	r3, r3, #4
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001380:	4b23      	ldr	r3, [pc, #140]	; (8001410 <MX_GPIO_Init+0xbc>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	4a22      	ldr	r2, [pc, #136]	; (8001410 <MX_GPIO_Init+0xbc>)
 8001386:	f043 0308 	orr.w	r3, r3, #8
 800138a:	6193      	str	r3, [r2, #24]
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <MX_GPIO_Init+0xbc>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	f003 0308 	and.w	r3, r3, #8
 8001394:	603b      	str	r3, [r7, #0]
 8001396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN7_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 8001398:	2200      	movs	r2, #0
 800139a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 800139e:	481d      	ldr	r0, [pc, #116]	; (8001414 <MX_GPIO_Init+0xc0>)
 80013a0:	f001 f85f 	bl	8002462 <HAL_GPIO_WritePin>
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG7_Pin|SEG8_Pin|SEG9_Pin|SEG10_Pin
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Led_Red1_Pin|Led_Green1_Pin|Led_Yellow1_Pin|EN5_Pin
 80013a4:	2200      	movs	r2, #0
 80013a6:	f641 71ff 	movw	r1, #8191	; 0x1fff
 80013aa:	481b      	ldr	r0, [pc, #108]	; (8001418 <MX_GPIO_Init+0xc4>)
 80013ac:	f001 f859 	bl	8002462 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EN7_Pin SEG0_Pin SEG1_Pin SEG2_Pin
                           SEG3_Pin SEG4_Pin SEG5_Pin SEG6_Pin
                           SEG7_Pin SEG8_Pin SEG9_Pin SEG10_Pin
                           SEG11_Pin SEG12_Pin SEG13_Pin */
  GPIO_InitStruct.Pin = EN7_Pin|SEG0_Pin|SEG1_Pin|SEG2_Pin
 80013b0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80013b4:	60bb      	str	r3, [r7, #8]
                          |SEG3_Pin|SEG4_Pin|SEG5_Pin|SEG6_Pin
                          |SEG7_Pin|SEG8_Pin|SEG9_Pin|SEG10_Pin
                          |SEG11_Pin|SEG12_Pin|SEG13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2302      	movs	r3, #2
 80013c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 0308 	add.w	r3, r7, #8
 80013c6:	4619      	mov	r1, r3
 80013c8:	4812      	ldr	r0, [pc, #72]	; (8001414 <MX_GPIO_Init+0xc0>)
 80013ca:	f000 feb9 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Red1_Pin Led_Green1_Pin Led_Yellow1_Pin EN5_Pin
                           EN6_Pin EN0_Pin Led_Red2_Pin Led_Green2_Pin
                           Led_Yellow2_Pin EN1_Pin EN2_Pin EN3_Pin
                           EN4_Pin */
  GPIO_InitStruct.Pin = Led_Red1_Pin|Led_Green1_Pin|Led_Yellow1_Pin|EN5_Pin
 80013ce:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80013d2:	60bb      	str	r3, [r7, #8]
                          |EN6_Pin|EN0_Pin|Led_Red2_Pin|Led_Green2_Pin
                          |Led_Yellow2_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2302      	movs	r3, #2
 80013de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0308 	add.w	r3, r7, #8
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <MX_GPIO_Init+0xc4>)
 80013e8:	f000 feaa 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80013ec:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fa:	f107 0308 	add.w	r3, r7, #8
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_GPIO_Init+0xc4>)
 8001402:	f000 fe9d 	bl	8002140 <HAL_GPIO_Init>

}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40021000 	.word	0x40021000
 8001414:	40010800 	.word	0x40010800
 8001418:	40010c00 	.word	0x40010c00

0800141c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback( TIM_HandleTypeDef * htim ){
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	 timerRun();
 8001424:	f000 fbfe 	bl	8001c24 <timerRun>
	 getKeyInput();
 8001428:	f7fe feea 	bl	8000200 <getKeyInput>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <display7SEG>:

void display7SEG( int counter){
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b09      	cmp	r3, #9
 8001440:	f200 818a 	bhi.w	8001758 <display7SEG+0x324>
 8001444:	a201      	add	r2, pc, #4	; (adr r2, 800144c <display7SEG+0x18>)
 8001446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144a:	bf00      	nop
 800144c:	08001475 	.word	0x08001475
 8001450:	080014bf 	.word	0x080014bf
 8001454:	08001509 	.word	0x08001509
 8001458:	08001553 	.word	0x08001553
 800145c:	0800159d 	.word	0x0800159d
 8001460:	080015e7 	.word	0x080015e7
 8001464:	08001631 	.word	0x08001631
 8001468:	0800167b 	.word	0x0800167b
 800146c:	080016c5 	.word	0x080016c5
 8001470:	0800170f 	.word	0x0800170f
	switch(counter){
    case 0:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	2104      	movs	r1, #4
 8001478:	48b9      	ldr	r0, [pc, #740]	; (8001760 <display7SEG+0x32c>)
 800147a:	f000 fff2 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2108      	movs	r1, #8
 8001482:	48b7      	ldr	r0, [pc, #732]	; (8001760 <display7SEG+0x32c>)
 8001484:	f000 ffed 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	2110      	movs	r1, #16
 800148c:	48b4      	ldr	r0, [pc, #720]	; (8001760 <display7SEG+0x32c>)
 800148e:	f000 ffe8 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	2120      	movs	r1, #32
 8001496:	48b2      	ldr	r0, [pc, #712]	; (8001760 <display7SEG+0x32c>)
 8001498:	f000 ffe3 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2140      	movs	r1, #64	; 0x40
 80014a0:	48af      	ldr	r0, [pc, #700]	; (8001760 <display7SEG+0x32c>)
 80014a2:	f000 ffde 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	48ad      	ldr	r0, [pc, #692]	; (8001760 <display7SEG+0x32c>)
 80014ac:	f000 ffd9 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b6:	48aa      	ldr	r0, [pc, #680]	; (8001760 <display7SEG+0x32c>)
 80014b8:	f000 ffd3 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 80014bc:	e14c      	b.n	8001758 <display7SEG+0x324>
	case 1:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2104      	movs	r1, #4
 80014c2:	48a7      	ldr	r0, [pc, #668]	; (8001760 <display7SEG+0x32c>)
 80014c4:	f000 ffcd 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2108      	movs	r1, #8
 80014cc:	48a4      	ldr	r0, [pc, #656]	; (8001760 <display7SEG+0x32c>)
 80014ce:	f000 ffc8 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2110      	movs	r1, #16
 80014d6:	48a2      	ldr	r0, [pc, #648]	; (8001760 <display7SEG+0x32c>)
 80014d8:	f000 ffc3 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	2120      	movs	r1, #32
 80014e0:	489f      	ldr	r0, [pc, #636]	; (8001760 <display7SEG+0x32c>)
 80014e2:	f000 ffbe 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	2140      	movs	r1, #64	; 0x40
 80014ea:	489d      	ldr	r0, [pc, #628]	; (8001760 <display7SEG+0x32c>)
 80014ec:	f000 ffb9 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	489a      	ldr	r0, [pc, #616]	; (8001760 <display7SEG+0x32c>)
 80014f6:	f000 ffb4 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001500:	4897      	ldr	r0, [pc, #604]	; (8001760 <display7SEG+0x32c>)
 8001502:	f000 ffae 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 8001506:	e127      	b.n	8001758 <display7SEG+0x324>
	case 2:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2104      	movs	r1, #4
 800150c:	4894      	ldr	r0, [pc, #592]	; (8001760 <display7SEG+0x32c>)
 800150e:	f000 ffa8 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2108      	movs	r1, #8
 8001516:	4892      	ldr	r0, [pc, #584]	; (8001760 <display7SEG+0x32c>)
 8001518:	f000 ffa3 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 800151c:	2201      	movs	r2, #1
 800151e:	2110      	movs	r1, #16
 8001520:	488f      	ldr	r0, [pc, #572]	; (8001760 <display7SEG+0x32c>)
 8001522:	f000 ff9e 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2120      	movs	r1, #32
 800152a:	488d      	ldr	r0, [pc, #564]	; (8001760 <display7SEG+0x32c>)
 800152c:	f000 ff99 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2140      	movs	r1, #64	; 0x40
 8001534:	488a      	ldr	r0, [pc, #552]	; (8001760 <display7SEG+0x32c>)
 8001536:	f000 ff94 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	4888      	ldr	r0, [pc, #544]	; (8001760 <display7SEG+0x32c>)
 8001540:	f000 ff8f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	f44f 7180 	mov.w	r1, #256	; 0x100
 800154a:	4885      	ldr	r0, [pc, #532]	; (8001760 <display7SEG+0x32c>)
 800154c:	f000 ff89 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 8001550:	e102      	b.n	8001758 <display7SEG+0x324>
	case 3:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8001552:	2200      	movs	r2, #0
 8001554:	2104      	movs	r1, #4
 8001556:	4882      	ldr	r0, [pc, #520]	; (8001760 <display7SEG+0x32c>)
 8001558:	f000 ff83 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800155c:	2200      	movs	r2, #0
 800155e:	2108      	movs	r1, #8
 8001560:	487f      	ldr	r0, [pc, #508]	; (8001760 <display7SEG+0x32c>)
 8001562:	f000 ff7e 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2110      	movs	r1, #16
 800156a:	487d      	ldr	r0, [pc, #500]	; (8001760 <display7SEG+0x32c>)
 800156c:	f000 ff79 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	2120      	movs	r1, #32
 8001574:	487a      	ldr	r0, [pc, #488]	; (8001760 <display7SEG+0x32c>)
 8001576:	f000 ff74 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800157a:	2201      	movs	r2, #1
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	4878      	ldr	r0, [pc, #480]	; (8001760 <display7SEG+0x32c>)
 8001580:	f000 ff6f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8001584:	2201      	movs	r2, #1
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	4875      	ldr	r0, [pc, #468]	; (8001760 <display7SEG+0x32c>)
 800158a:	f000 ff6a 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800158e:	2200      	movs	r2, #0
 8001590:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001594:	4872      	ldr	r0, [pc, #456]	; (8001760 <display7SEG+0x32c>)
 8001596:	f000 ff64 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 800159a:	e0dd      	b.n	8001758 <display7SEG+0x324>
	case 4:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2104      	movs	r1, #4
 80015a0:	486f      	ldr	r0, [pc, #444]	; (8001760 <display7SEG+0x32c>)
 80015a2:	f000 ff5e 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2108      	movs	r1, #8
 80015aa:	486d      	ldr	r0, [pc, #436]	; (8001760 <display7SEG+0x32c>)
 80015ac:	f000 ff59 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2110      	movs	r1, #16
 80015b4:	486a      	ldr	r0, [pc, #424]	; (8001760 <display7SEG+0x32c>)
 80015b6:	f000 ff54 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2120      	movs	r1, #32
 80015be:	4868      	ldr	r0, [pc, #416]	; (8001760 <display7SEG+0x32c>)
 80015c0:	f000 ff4f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2140      	movs	r1, #64	; 0x40
 80015c8:	4865      	ldr	r0, [pc, #404]	; (8001760 <display7SEG+0x32c>)
 80015ca:	f000 ff4a 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	4863      	ldr	r0, [pc, #396]	; (8001760 <display7SEG+0x32c>)
 80015d4:	f000 ff45 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015de:	4860      	ldr	r0, [pc, #384]	; (8001760 <display7SEG+0x32c>)
 80015e0:	f000 ff3f 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 80015e4:	e0b8      	b.n	8001758 <display7SEG+0x324>
    case 5:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2104      	movs	r1, #4
 80015ea:	485d      	ldr	r0, [pc, #372]	; (8001760 <display7SEG+0x32c>)
 80015ec:	f000 ff39 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2108      	movs	r1, #8
 80015f4:	485a      	ldr	r0, [pc, #360]	; (8001760 <display7SEG+0x32c>)
 80015f6:	f000 ff34 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2110      	movs	r1, #16
 80015fe:	4858      	ldr	r0, [pc, #352]	; (8001760 <display7SEG+0x32c>)
 8001600:	f000 ff2f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2120      	movs	r1, #32
 8001608:	4855      	ldr	r0, [pc, #340]	; (8001760 <display7SEG+0x32c>)
 800160a:	f000 ff2a 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800160e:	2201      	movs	r2, #1
 8001610:	2140      	movs	r1, #64	; 0x40
 8001612:	4853      	ldr	r0, [pc, #332]	; (8001760 <display7SEG+0x32c>)
 8001614:	f000 ff25 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	4850      	ldr	r0, [pc, #320]	; (8001760 <display7SEG+0x32c>)
 800161e:	f000 ff20 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001628:	484d      	ldr	r0, [pc, #308]	; (8001760 <display7SEG+0x32c>)
 800162a:	f000 ff1a 	bl	8002462 <HAL_GPIO_WritePin>
	break;
 800162e:	e093      	b.n	8001758 <display7SEG+0x324>
	case 6:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	2104      	movs	r1, #4
 8001634:	484a      	ldr	r0, [pc, #296]	; (8001760 <display7SEG+0x32c>)
 8001636:	f000 ff14 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 800163a:	2201      	movs	r2, #1
 800163c:	2108      	movs	r1, #8
 800163e:	4848      	ldr	r0, [pc, #288]	; (8001760 <display7SEG+0x32c>)
 8001640:	f000 ff0f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2110      	movs	r1, #16
 8001648:	4845      	ldr	r0, [pc, #276]	; (8001760 <display7SEG+0x32c>)
 800164a:	f000 ff0a 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2120      	movs	r1, #32
 8001652:	4843      	ldr	r0, [pc, #268]	; (8001760 <display7SEG+0x32c>)
 8001654:	f000 ff05 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2140      	movs	r1, #64	; 0x40
 800165c:	4840      	ldr	r0, [pc, #256]	; (8001760 <display7SEG+0x32c>)
 800165e:	f000 ff00 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	483e      	ldr	r0, [pc, #248]	; (8001760 <display7SEG+0x32c>)
 8001668:	f000 fefb 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800166c:	2200      	movs	r2, #0
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	483b      	ldr	r0, [pc, #236]	; (8001760 <display7SEG+0x32c>)
 8001674:	f000 fef5 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 8001678:	e06e      	b.n	8001758 <display7SEG+0x324>
	case 7:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	2104      	movs	r1, #4
 800167e:	4838      	ldr	r0, [pc, #224]	; (8001760 <display7SEG+0x32c>)
 8001680:	f000 feef 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8001684:	2200      	movs	r2, #0
 8001686:	2108      	movs	r1, #8
 8001688:	4835      	ldr	r0, [pc, #212]	; (8001760 <display7SEG+0x32c>)
 800168a:	f000 feea 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	2110      	movs	r1, #16
 8001692:	4833      	ldr	r0, [pc, #204]	; (8001760 <display7SEG+0x32c>)
 8001694:	f000 fee5 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8001698:	2201      	movs	r2, #1
 800169a:	2120      	movs	r1, #32
 800169c:	4830      	ldr	r0, [pc, #192]	; (8001760 <display7SEG+0x32c>)
 800169e:	f000 fee0 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80016a2:	2201      	movs	r2, #1
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	482e      	ldr	r0, [pc, #184]	; (8001760 <display7SEG+0x32c>)
 80016a8:	f000 fedb 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2180      	movs	r1, #128	; 0x80
 80016b0:	482b      	ldr	r0, [pc, #172]	; (8001760 <display7SEG+0x32c>)
 80016b2:	f000 fed6 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016bc:	4828      	ldr	r0, [pc, #160]	; (8001760 <display7SEG+0x32c>)
 80016be:	f000 fed0 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 80016c2:	e049      	b.n	8001758 <display7SEG+0x324>
	case 8:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2104      	movs	r1, #4
 80016c8:	4825      	ldr	r0, [pc, #148]	; (8001760 <display7SEG+0x32c>)
 80016ca:	f000 feca 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2108      	movs	r1, #8
 80016d2:	4823      	ldr	r0, [pc, #140]	; (8001760 <display7SEG+0x32c>)
 80016d4:	f000 fec5 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80016d8:	2200      	movs	r2, #0
 80016da:	2110      	movs	r1, #16
 80016dc:	4820      	ldr	r0, [pc, #128]	; (8001760 <display7SEG+0x32c>)
 80016de:	f000 fec0 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2120      	movs	r1, #32
 80016e6:	481e      	ldr	r0, [pc, #120]	; (8001760 <display7SEG+0x32c>)
 80016e8:	f000 febb 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2140      	movs	r1, #64	; 0x40
 80016f0:	481b      	ldr	r0, [pc, #108]	; (8001760 <display7SEG+0x32c>)
 80016f2:	f000 feb6 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	4819      	ldr	r0, [pc, #100]	; (8001760 <display7SEG+0x32c>)
 80016fc:	f000 feb1 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8001700:	2200      	movs	r2, #0
 8001702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001706:	4816      	ldr	r0, [pc, #88]	; (8001760 <display7SEG+0x32c>)
 8001708:	f000 feab 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 800170c:	e024      	b.n	8001758 <display7SEG+0x324>
	case 9:
		HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800170e:	2200      	movs	r2, #0
 8001710:	2104      	movs	r1, #4
 8001712:	4813      	ldr	r0, [pc, #76]	; (8001760 <display7SEG+0x32c>)
 8001714:	f000 fea5 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	2108      	movs	r1, #8
 800171c:	4810      	ldr	r0, [pc, #64]	; (8001760 <display7SEG+0x32c>)
 800171e:	f000 fea0 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2110      	movs	r1, #16
 8001726:	480e      	ldr	r0, [pc, #56]	; (8001760 <display7SEG+0x32c>)
 8001728:	f000 fe9b 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2120      	movs	r1, #32
 8001730:	480b      	ldr	r0, [pc, #44]	; (8001760 <display7SEG+0x32c>)
 8001732:	f000 fe96 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8001736:	2201      	movs	r2, #1
 8001738:	2140      	movs	r1, #64	; 0x40
 800173a:	4809      	ldr	r0, [pc, #36]	; (8001760 <display7SEG+0x32c>)
 800173c:	f000 fe91 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8001740:	2200      	movs	r2, #0
 8001742:	2180      	movs	r1, #128	; 0x80
 8001744:	4806      	ldr	r0, [pc, #24]	; (8001760 <display7SEG+0x32c>)
 8001746:	f000 fe8c 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001750:	4803      	ldr	r0, [pc, #12]	; (8001760 <display7SEG+0x32c>)
 8001752:	f000 fe86 	bl	8002462 <HAL_GPIO_WritePin>

		break;
 8001756:	bf00      	nop
	}
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40010800 	.word	0x40010800

08001764 <display7SEG1>:

void display7SEG1( int counter){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b09      	cmp	r3, #9
 8001770:	f200 81c9 	bhi.w	8001b06 <display7SEG1+0x3a2>
 8001774:	a201      	add	r2, pc, #4	; (adr r2, 800177c <display7SEG1+0x18>)
 8001776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177a:	bf00      	nop
 800177c:	080017a5 	.word	0x080017a5
 8001780:	080017fb 	.word	0x080017fb
 8001784:	08001851 	.word	0x08001851
 8001788:	080018a7 	.word	0x080018a7
 800178c:	080018fd 	.word	0x080018fd
 8001790:	08001953 	.word	0x08001953
 8001794:	080019a9 	.word	0x080019a9
 8001798:	080019ff 	.word	0x080019ff
 800179c:	08001a55 	.word	0x08001a55
 80017a0:	08001ab1 	.word	0x08001ab1
	switch(counter){
    case 0:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80017a4:	2200      	movs	r2, #0
 80017a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017aa:	48c0      	ldr	r0, [pc, #768]	; (8001aac <display7SEG1+0x348>)
 80017ac:	f000 fe59 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017b6:	48bd      	ldr	r0, [pc, #756]	; (8001aac <display7SEG1+0x348>)
 80017b8:	f000 fe53 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017c2:	48ba      	ldr	r0, [pc, #744]	; (8001aac <display7SEG1+0x348>)
 80017c4:	f000 fe4d 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ce:	48b7      	ldr	r0, [pc, #732]	; (8001aac <display7SEG1+0x348>)
 80017d0:	f000 fe47 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 80017d4:	2200      	movs	r2, #0
 80017d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017da:	48b4      	ldr	r0, [pc, #720]	; (8001aac <display7SEG1+0x348>)
 80017dc:	f000 fe41 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e6:	48b1      	ldr	r0, [pc, #708]	; (8001aac <display7SEG1+0x348>)
 80017e8:	f000 fe3b 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 80017ec:	2201      	movs	r2, #1
 80017ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017f2:	48ae      	ldr	r0, [pc, #696]	; (8001aac <display7SEG1+0x348>)
 80017f4:	f000 fe35 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 80017f8:	e185      	b.n	8001b06 <display7SEG1+0x3a2>
	case 1:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 80017fa:	2201      	movs	r2, #1
 80017fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001800:	48aa      	ldr	r0, [pc, #680]	; (8001aac <display7SEG1+0x348>)
 8001802:	f000 fe2e 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001806:	2200      	movs	r2, #0
 8001808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800180c:	48a7      	ldr	r0, [pc, #668]	; (8001aac <display7SEG1+0x348>)
 800180e:	f000 fe28 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001818:	48a4      	ldr	r0, [pc, #656]	; (8001aac <display7SEG1+0x348>)
 800181a:	f000 fe22 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 800181e:	2201      	movs	r2, #1
 8001820:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001824:	48a1      	ldr	r0, [pc, #644]	; (8001aac <display7SEG1+0x348>)
 8001826:	f000 fe1c 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001830:	489e      	ldr	r0, [pc, #632]	; (8001aac <display7SEG1+0x348>)
 8001832:	f000 fe16 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800183c:	489b      	ldr	r0, [pc, #620]	; (8001aac <display7SEG1+0x348>)
 800183e:	f000 fe10 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8001842:	2201      	movs	r2, #1
 8001844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001848:	4898      	ldr	r0, [pc, #608]	; (8001aac <display7SEG1+0x348>)
 800184a:	f000 fe0a 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 800184e:	e15a      	b.n	8001b06 <display7SEG1+0x3a2>
	case 2:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001856:	4895      	ldr	r0, [pc, #596]	; (8001aac <display7SEG1+0x348>)
 8001858:	f000 fe03 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001862:	4892      	ldr	r0, [pc, #584]	; (8001aac <display7SEG1+0x348>)
 8001864:	f000 fdfd 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, SET);
 8001868:	2201      	movs	r2, #1
 800186a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800186e:	488f      	ldr	r0, [pc, #572]	; (8001aac <display7SEG1+0x348>)
 8001870:	f000 fdf7 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187a:	488c      	ldr	r0, [pc, #560]	; (8001aac <display7SEG1+0x348>)
 800187c:	f000 fdf1 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001886:	4889      	ldr	r0, [pc, #548]	; (8001aac <display7SEG1+0x348>)
 8001888:	f000 fdeb 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001892:	4886      	ldr	r0, [pc, #536]	; (8001aac <display7SEG1+0x348>)
 8001894:	f000 fde5 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189e:	4883      	ldr	r0, [pc, #524]	; (8001aac <display7SEG1+0x348>)
 80018a0:	f000 fddf 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 80018a4:	e12f      	b.n	8001b06 <display7SEG1+0x3a2>
	case 3:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018ac:	487f      	ldr	r0, [pc, #508]	; (8001aac <display7SEG1+0x348>)
 80018ae:	f000 fdd8 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018b8:	487c      	ldr	r0, [pc, #496]	; (8001aac <display7SEG1+0x348>)
 80018ba:	f000 fdd2 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018c4:	4879      	ldr	r0, [pc, #484]	; (8001aac <display7SEG1+0x348>)
 80018c6:	f000 fdcc 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d0:	4876      	ldr	r0, [pc, #472]	; (8001aac <display7SEG1+0x348>)
 80018d2:	f000 fdc6 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 80018d6:	2201      	movs	r2, #1
 80018d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018dc:	4873      	ldr	r0, [pc, #460]	; (8001aac <display7SEG1+0x348>)
 80018de:	f000 fdc0 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e8:	4870      	ldr	r0, [pc, #448]	; (8001aac <display7SEG1+0x348>)
 80018ea:	f000 fdba 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f4:	486d      	ldr	r0, [pc, #436]	; (8001aac <display7SEG1+0x348>)
 80018f6:	f000 fdb4 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 80018fa:	e104      	b.n	8001b06 <display7SEG1+0x3a2>
	case 4:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, SET);
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001902:	486a      	ldr	r0, [pc, #424]	; (8001aac <display7SEG1+0x348>)
 8001904:	f000 fdad 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800190e:	4867      	ldr	r0, [pc, #412]	; (8001aac <display7SEG1+0x348>)
 8001910:	f000 fda7 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800191a:	4864      	ldr	r0, [pc, #400]	; (8001aac <display7SEG1+0x348>)
 800191c:	f000 fda1 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8001920:	2201      	movs	r2, #1
 8001922:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001926:	4861      	ldr	r0, [pc, #388]	; (8001aac <display7SEG1+0x348>)
 8001928:	f000 fd9b 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001932:	485e      	ldr	r0, [pc, #376]	; (8001aac <display7SEG1+0x348>)
 8001934:	f000 fd95 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193e:	485b      	ldr	r0, [pc, #364]	; (8001aac <display7SEG1+0x348>)
 8001940:	f000 fd8f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194a:	4858      	ldr	r0, [pc, #352]	; (8001aac <display7SEG1+0x348>)
 800194c:	f000 fd89 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 8001950:	e0d9      	b.n	8001b06 <display7SEG1+0x3a2>
    case 5:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001958:	4854      	ldr	r0, [pc, #336]	; (8001aac <display7SEG1+0x348>)
 800195a:	f000 fd82 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001964:	4851      	ldr	r0, [pc, #324]	; (8001aac <display7SEG1+0x348>)
 8001966:	f000 fd7c 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001970:	484e      	ldr	r0, [pc, #312]	; (8001aac <display7SEG1+0x348>)
 8001972:	f000 fd76 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800197c:	484b      	ldr	r0, [pc, #300]	; (8001aac <display7SEG1+0x348>)
 800197e:	f000 fd70 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8001982:	2201      	movs	r2, #1
 8001984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001988:	4848      	ldr	r0, [pc, #288]	; (8001aac <display7SEG1+0x348>)
 800198a:	f000 fd6a 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 800198e:	2200      	movs	r2, #0
 8001990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001994:	4845      	ldr	r0, [pc, #276]	; (8001aac <display7SEG1+0x348>)
 8001996:	f000 fd64 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 800199a:	2200      	movs	r2, #0
 800199c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019a0:	4842      	ldr	r0, [pc, #264]	; (8001aac <display7SEG1+0x348>)
 80019a2:	f000 fd5e 	bl	8002462 <HAL_GPIO_WritePin>
	break;
 80019a6:	e0ae      	b.n	8001b06 <display7SEG1+0x3a2>
	case 6:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ae:	483f      	ldr	r0, [pc, #252]	; (8001aac <display7SEG1+0x348>)
 80019b0:	f000 fd57 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, SET);
 80019b4:	2201      	movs	r2, #1
 80019b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ba:	483c      	ldr	r0, [pc, #240]	; (8001aac <display7SEG1+0x348>)
 80019bc:	f000 fd51 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 80019c0:	2200      	movs	r2, #0
 80019c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c6:	4839      	ldr	r0, [pc, #228]	; (8001aac <display7SEG1+0x348>)
 80019c8:	f000 fd4b 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 80019cc:	2200      	movs	r2, #0
 80019ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019d2:	4836      	ldr	r0, [pc, #216]	; (8001aac <display7SEG1+0x348>)
 80019d4:	f000 fd45 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019de:	4833      	ldr	r0, [pc, #204]	; (8001aac <display7SEG1+0x348>)
 80019e0:	f000 fd3f 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 80019e4:	2200      	movs	r2, #0
 80019e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ea:	4830      	ldr	r0, [pc, #192]	; (8001aac <display7SEG1+0x348>)
 80019ec:	f000 fd39 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f6:	482d      	ldr	r0, [pc, #180]	; (8001aac <display7SEG1+0x348>)
 80019f8:	f000 fd33 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 80019fc:	e083      	b.n	8001b06 <display7SEG1+0x3a2>
	case 7:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 80019fe:	2200      	movs	r2, #0
 8001a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a04:	4829      	ldr	r0, [pc, #164]	; (8001aac <display7SEG1+0x348>)
 8001a06:	f000 fd2c 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a10:	4826      	ldr	r0, [pc, #152]	; (8001aac <display7SEG1+0x348>)
 8001a12:	f000 fd26 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001a16:	2200      	movs	r2, #0
 8001a18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a1c:	4823      	ldr	r0, [pc, #140]	; (8001aac <display7SEG1+0x348>)
 8001a1e:	f000 fd20 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a28:	4820      	ldr	r0, [pc, #128]	; (8001aac <display7SEG1+0x348>)
 8001a2a:	f000 fd1a 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a34:	481d      	ldr	r0, [pc, #116]	; (8001aac <display7SEG1+0x348>)
 8001a36:	f000 fd14 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a40:	481a      	ldr	r0, [pc, #104]	; (8001aac <display7SEG1+0x348>)
 8001a42:	f000 fd0e 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, SET);
 8001a46:	2201      	movs	r2, #1
 8001a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a4c:	4817      	ldr	r0, [pc, #92]	; (8001aac <display7SEG1+0x348>)
 8001a4e:	f000 fd08 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 8001a52:	e058      	b.n	8001b06 <display7SEG1+0x3a2>
	case 8:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001a54:	2200      	movs	r2, #0
 8001a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a5a:	4814      	ldr	r0, [pc, #80]	; (8001aac <display7SEG1+0x348>)
 8001a5c:	f000 fd01 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001a60:	2200      	movs	r2, #0
 8001a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a66:	4811      	ldr	r0, [pc, #68]	; (8001aac <display7SEG1+0x348>)
 8001a68:	f000 fcfb 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a72:	480e      	ldr	r0, [pc, #56]	; (8001aac <display7SEG1+0x348>)
 8001a74:	f000 fcf5 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a7e:	480b      	ldr	r0, [pc, #44]	; (8001aac <display7SEG1+0x348>)
 8001a80:	f000 fcef 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a8a:	4808      	ldr	r0, [pc, #32]	; (8001aac <display7SEG1+0x348>)
 8001a8c:	f000 fce9 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a96:	4805      	ldr	r0, [pc, #20]	; (8001aac <display7SEG1+0x348>)
 8001a98:	f000 fce3 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aa2:	4802      	ldr	r0, [pc, #8]	; (8001aac <display7SEG1+0x348>)
 8001aa4:	f000 fcdd 	bl	8002462 <HAL_GPIO_WritePin>
		break;
 8001aa8:	e02d      	b.n	8001b06 <display7SEG1+0x3a2>
 8001aaa:	bf00      	nop
 8001aac:	40010800 	.word	0x40010800
	case 9:
		HAL_GPIO_WritePin(SEG7_GPIO_Port, SEG7_Pin, RESET);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ab6:	4816      	ldr	r0, [pc, #88]	; (8001b10 <display7SEG1+0x3ac>)
 8001ab8:	f000 fcd3 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG8_GPIO_Port, SEG8_Pin, RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ac2:	4813      	ldr	r0, [pc, #76]	; (8001b10 <display7SEG1+0x3ac>)
 8001ac4:	f000 fccd 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG9_GPIO_Port, SEG9_Pin, RESET);
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ace:	4810      	ldr	r0, [pc, #64]	; (8001b10 <display7SEG1+0x3ac>)
 8001ad0:	f000 fcc7 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG10_GPIO_Port, SEG10_Pin, RESET);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ada:	480d      	ldr	r0, [pc, #52]	; (8001b10 <display7SEG1+0x3ac>)
 8001adc:	f000 fcc1 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG11_GPIO_Port, SEG11_Pin, SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae6:	480a      	ldr	r0, [pc, #40]	; (8001b10 <display7SEG1+0x3ac>)
 8001ae8:	f000 fcbb 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG12_GPIO_Port, SEG12_Pin, RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af2:	4807      	ldr	r0, [pc, #28]	; (8001b10 <display7SEG1+0x3ac>)
 8001af4:	f000 fcb5 	bl	8002462 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG13_GPIO_Port, SEG13_Pin, RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001afe:	4804      	ldr	r0, [pc, #16]	; (8001b10 <display7SEG1+0x3ac>)
 8001b00:	f000 fcaf 	bl	8002462 <HAL_GPIO_WritePin>

		break;
 8001b04:	bf00      	nop
	}
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40010800 	.word	0x40010800

08001b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b18:	b672      	cpsid	i
}
 8001b1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <Error_Handler+0x8>
	...

08001b20 <setTimer1>:
int timer4_counter = 0;

int timer5_flag = 0;
int timer5_counter = 0;

void setTimer1(int duration){
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TICK;
 8001b28:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <setTimer1+0x28>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b32:	4a06      	ldr	r2, [pc, #24]	; (8001b4c <setTimer1+0x2c>)
 8001b34:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <setTimer1+0x30>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	2000005c 	.word	0x2000005c
 8001b4c:	200000d8 	.word	0x200000d8
 8001b50:	200000d4 	.word	0x200000d4

08001b54 <setTimer2>:

void setTimer2(int duration){
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TICK;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <setTimer2+0x28>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b66:	4a06      	ldr	r2, [pc, #24]	; (8001b80 <setTimer2+0x2c>)
 8001b68:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <setTimer2+0x30>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	2000005c 	.word	0x2000005c
 8001b80:	200000e0 	.word	0x200000e0
 8001b84:	200000dc 	.word	0x200000dc

08001b88 <setTimer3>:

void setTimer3(int duration){
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TICK;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <setTimer3+0x28>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b9a:	4a06      	ldr	r2, [pc, #24]	; (8001bb4 <setTimer3+0x2c>)
 8001b9c:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <setTimer3+0x30>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000005c 	.word	0x2000005c
 8001bb4:	200000e8 	.word	0x200000e8
 8001bb8:	200000e4 	.word	0x200000e4

08001bbc <setTimer4>:

void setTimer4(int duration){
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TICK;
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <setTimer4+0x28>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	fb92 f3f3 	sdiv	r3, r2, r3
 8001bce:	4a06      	ldr	r2, [pc, #24]	; (8001be8 <setTimer4+0x2c>)
 8001bd0:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <setTimer4+0x30>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	2000005c 	.word	0x2000005c
 8001be8:	200000f0 	.word	0x200000f0
 8001bec:	200000ec 	.word	0x200000ec

08001bf0 <setTimer5>:

void setTimer5(int duration){
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/TICK;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <setTimer5+0x28>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c02:	4a06      	ldr	r2, [pc, #24]	; (8001c1c <setTimer5+0x2c>)
 8001c04:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <setTimer5+0x30>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	2000005c 	.word	0x2000005c
 8001c1c:	200000f8 	.word	0x200000f8
 8001c20:	200000f4 	.word	0x200000f4

08001c24 <timerRun>:

void timerRun(){
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
	// timer 1
	if(timer1_counter> 0){
 8001c28:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <timerRun+0xac>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	dd0b      	ble.n	8001c48 <timerRun+0x24>
		timer1_counter-- ;
 8001c30:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <timerRun+0xac>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3b01      	subs	r3, #1
 8001c36:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <timerRun+0xac>)
 8001c38:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8001c3a:	4b25      	ldr	r3, [pc, #148]	; (8001cd0 <timerRun+0xac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	dc02      	bgt.n	8001c48 <timerRun+0x24>
			timer1_flag = 1;
 8001c42:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <timerRun+0xb0>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
		}
	}
	//timer 2
	if(timer2_counter> 0){
 8001c48:	4b23      	ldr	r3, [pc, #140]	; (8001cd8 <timerRun+0xb4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	dd0b      	ble.n	8001c68 <timerRun+0x44>
		timer2_counter-- ;
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <timerRun+0xb4>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	3b01      	subs	r3, #1
 8001c56:	4a20      	ldr	r2, [pc, #128]	; (8001cd8 <timerRun+0xb4>)
 8001c58:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0){
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <timerRun+0xb4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	dc02      	bgt.n	8001c68 <timerRun+0x44>
			timer2_flag = 1;
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <timerRun+0xb8>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
		}
	}
	// timer 3
	if(timer3_counter> 0){
 8001c68:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <timerRun+0xbc>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	dd0b      	ble.n	8001c88 <timerRun+0x64>
		timer3_counter-- ;
 8001c70:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <timerRun+0xbc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3b01      	subs	r3, #1
 8001c76:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <timerRun+0xbc>)
 8001c78:	6013      	str	r3, [r2, #0]
		if(timer3_counter <= 0){
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <timerRun+0xbc>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	dc02      	bgt.n	8001c88 <timerRun+0x64>
			timer3_flag = 1;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <timerRun+0xc0>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
		}
	}
	//timer 4
	if(timer4_counter> 0){
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <timerRun+0xc4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	dd0b      	ble.n	8001ca8 <timerRun+0x84>
		timer4_counter-- ;
 8001c90:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <timerRun+0xc4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <timerRun+0xc4>)
 8001c98:	6013      	str	r3, [r2, #0]
		if(timer4_counter <= 0){
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <timerRun+0xc4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc02      	bgt.n	8001ca8 <timerRun+0x84>
			timer4_flag = 1;
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <timerRun+0xc8>)
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
		}
	}
	//timer 5
	if(timer5_counter> 0){
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <timerRun+0xcc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	dd0b      	ble.n	8001cc8 <timerRun+0xa4>
		timer5_counter-- ;
 8001cb0:	4b0f      	ldr	r3, [pc, #60]	; (8001cf0 <timerRun+0xcc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	4a0e      	ldr	r2, [pc, #56]	; (8001cf0 <timerRun+0xcc>)
 8001cb8:	6013      	str	r3, [r2, #0]
		if(timer5_counter <= 0){
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <timerRun+0xcc>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	dc02      	bgt.n	8001cc8 <timerRun+0xa4>
			timer5_flag = 1;
 8001cc2:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <timerRun+0xd0>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	200000d8 	.word	0x200000d8
 8001cd4:	200000d4 	.word	0x200000d4
 8001cd8:	200000e0 	.word	0x200000e0
 8001cdc:	200000dc 	.word	0x200000dc
 8001ce0:	200000e8 	.word	0x200000e8
 8001ce4:	200000e4 	.word	0x200000e4
 8001ce8:	200000f0 	.word	0x200000f0
 8001cec:	200000ec 	.word	0x200000ec
 8001cf0:	200000f8 	.word	0x200000f8
 8001cf4:	200000f4 	.word	0x200000f4

08001cf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6193      	str	r3, [r2, #24]
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60bb      	str	r3, [r7, #8]
 8001d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	4a0e      	ldr	r2, [pc, #56]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d20:	61d3      	str	r3, [r2, #28]
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <HAL_MspInit+0x5c>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_MspInit+0x60>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <HAL_MspInit+0x60>)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000

08001d5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d6c:	d113      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <HAL_TIM_Base_MspInit+0x44>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <HAL_TIM_Base_MspInit+0x44>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	61d3      	str	r3, [r2, #28]
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_TIM_Base_MspInit+0x44>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d86:	2200      	movs	r2, #0
 8001d88:	2100      	movs	r1, #0
 8001d8a:	201c      	movs	r0, #28
 8001d8c:	f000 f9a1 	bl	80020d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d90:	201c      	movs	r0, #28
 8001d92:	f000 f9ba 	bl	800210a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40021000 	.word	0x40021000

08001da4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler+0x4>

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dae:	e7fe      	b.n	8001dae <HardFault_Handler+0x4>

08001db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <MemManage_Handler+0x4>

08001db6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr

08001de6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dea:	f000 f87f 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <TIM2_IRQHandler+0x10>)
 8001dfa:	f000 ffe7 	bl	8002dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200000fc 	.word	0x200000fc

08001e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e16:	490d      	ldr	r1, [pc, #52]	; (8001e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e1c:	e002      	b.n	8001e24 <LoopCopyDataInit>

08001e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e22:	3304      	adds	r3, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e28:	d3f9      	bcc.n	8001e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e2c:	4c0a      	ldr	r4, [pc, #40]	; (8001e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e30:	e001      	b.n	8001e36 <LoopFillZerobss>

08001e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e34:	3204      	adds	r2, #4

08001e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e38:	d3fb      	bcc.n	8001e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e3a:	f7ff ffe5 	bl	8001e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e3e:	f001 fb0d 	bl	800345c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e42:	f7ff f9d1 	bl	80011e8 <main>
  bx lr
 8001e46:	4770      	bx	lr
  ldr r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e4c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e50:	080034f4 	.word	0x080034f4
  ldr r2, =_sbss
 8001e54:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001e58:	20000148 	.word	0x20000148

08001e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC1_2_IRQHandler>
	...

08001e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e64:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_Init+0x28>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a07      	ldr	r2, [pc, #28]	; (8001e88 <HAL_Init+0x28>)
 8001e6a:	f043 0310 	orr.w	r3, r3, #16
 8001e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 f923 	bl	80020bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f000 f808 	bl	8001e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7c:	f7ff ff3c 	bl	8001cf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40022000 	.word	0x40022000

08001e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_InitTick+0x54>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x58>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f93b 	bl	8002126 <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00e      	b.n	8001ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d80a      	bhi.n	8001ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f000 f903 	bl	80020d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ecc:	4a06      	ldr	r2, [pc, #24]	; (8001ee8 <HAL_InitTick+0x5c>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000060 	.word	0x20000060
 8001ee4:	20000068 	.word	0x20000068
 8001ee8:	20000064 	.word	0x20000064

08001eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef0:	4b05      	ldr	r3, [pc, #20]	; (8001f08 <HAL_IncTick+0x1c>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_IncTick+0x20>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <HAL_IncTick+0x20>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	20000068 	.word	0x20000068
 8001f0c:	20000144 	.word	0x20000144

08001f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b02      	ldr	r3, [pc, #8]	; (8001f20 <HAL_GetTick+0x10>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	20000144 	.word	0x20000144

08001f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3a:	68ba      	ldr	r2, [r7, #8]
 8001f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f40:	4013      	ands	r3, r2
 8001f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f56:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <__NVIC_SetPriorityGrouping+0x44>)
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	60d3      	str	r3, [r2, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <__NVIC_GetPriorityGrouping+0x18>)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	0a1b      	lsrs	r3, r3, #8
 8001f76:	f003 0307 	and.w	r3, r3, #7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	4603      	mov	r3, r0
 8001f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	db0b      	blt.n	8001fb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f003 021f 	and.w	r2, r3, #31
 8001fa0:	4906      	ldr	r1, [pc, #24]	; (8001fbc <__NVIC_EnableIRQ+0x34>)
 8001fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	2001      	movs	r0, #1
 8001faa:	fa00 f202 	lsl.w	r2, r0, r2
 8001fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bc80      	pop	{r7}
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	bc80      	pop	{r7}
 8002076:	4770      	bx	lr

08002078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3b01      	subs	r3, #1
 8002084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002088:	d301      	bcc.n	800208e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208a:	2301      	movs	r3, #1
 800208c:	e00f      	b.n	80020ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <SysTick_Config+0x40>)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002096:	210f      	movs	r1, #15
 8002098:	f04f 30ff 	mov.w	r0, #4294967295
 800209c:	f7ff ff90 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a0:	4b05      	ldr	r3, [pc, #20]	; (80020b8 <SysTick_Config+0x40>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <SysTick_Config+0x40>)
 80020a8:	2207      	movs	r2, #7
 80020aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	e000e010 	.word	0xe000e010

080020bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff2d 	bl	8001f24 <__NVIC_SetPriorityGrouping>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	4603      	mov	r3, r0
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
 80020de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e4:	f7ff ff42 	bl	8001f6c <__NVIC_GetPriorityGrouping>
 80020e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	68b9      	ldr	r1, [r7, #8]
 80020ee:	6978      	ldr	r0, [r7, #20]
 80020f0:	f7ff ff90 	bl	8002014 <NVIC_EncodePriority>
 80020f4:	4602      	mov	r2, r0
 80020f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fa:	4611      	mov	r1, r2
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff ff5f 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002102:	bf00      	nop
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b082      	sub	sp, #8
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff ff35 	bl	8001f88 <__NVIC_EnableIRQ>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff ffa2 	bl	8002078 <SysTick_Config>
 8002134:	4603      	mov	r3, r0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
	...

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b08b      	sub	sp, #44	; 0x2c
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800214e:	2300      	movs	r3, #0
 8002150:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002152:	e148      	b.n	80023e6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002154:	2201      	movs	r2, #1
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	429a      	cmp	r2, r3
 800216e:	f040 8137 	bne.w	80023e0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4aa3      	ldr	r2, [pc, #652]	; (8002404 <HAL_GPIO_Init+0x2c4>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d05e      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 800217c:	4aa1      	ldr	r2, [pc, #644]	; (8002404 <HAL_GPIO_Init+0x2c4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d875      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 8002182:	4aa1      	ldr	r2, [pc, #644]	; (8002408 <HAL_GPIO_Init+0x2c8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d058      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 8002188:	4a9f      	ldr	r2, [pc, #636]	; (8002408 <HAL_GPIO_Init+0x2c8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d86f      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 800218e:	4a9f      	ldr	r2, [pc, #636]	; (800240c <HAL_GPIO_Init+0x2cc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d052      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 8002194:	4a9d      	ldr	r2, [pc, #628]	; (800240c <HAL_GPIO_Init+0x2cc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d869      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 800219a:	4a9d      	ldr	r2, [pc, #628]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d04c      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 80021a0:	4a9b      	ldr	r2, [pc, #620]	; (8002410 <HAL_GPIO_Init+0x2d0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d863      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 80021a6:	4a9b      	ldr	r2, [pc, #620]	; (8002414 <HAL_GPIO_Init+0x2d4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d046      	beq.n	800223a <HAL_GPIO_Init+0xfa>
 80021ac:	4a99      	ldr	r2, [pc, #612]	; (8002414 <HAL_GPIO_Init+0x2d4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d85d      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d82a      	bhi.n	800220c <HAL_GPIO_Init+0xcc>
 80021b6:	2b12      	cmp	r3, #18
 80021b8:	d859      	bhi.n	800226e <HAL_GPIO_Init+0x12e>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <HAL_GPIO_Init+0x80>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	0800223b 	.word	0x0800223b
 80021c4:	08002215 	.word	0x08002215
 80021c8:	08002227 	.word	0x08002227
 80021cc:	08002269 	.word	0x08002269
 80021d0:	0800226f 	.word	0x0800226f
 80021d4:	0800226f 	.word	0x0800226f
 80021d8:	0800226f 	.word	0x0800226f
 80021dc:	0800226f 	.word	0x0800226f
 80021e0:	0800226f 	.word	0x0800226f
 80021e4:	0800226f 	.word	0x0800226f
 80021e8:	0800226f 	.word	0x0800226f
 80021ec:	0800226f 	.word	0x0800226f
 80021f0:	0800226f 	.word	0x0800226f
 80021f4:	0800226f 	.word	0x0800226f
 80021f8:	0800226f 	.word	0x0800226f
 80021fc:	0800226f 	.word	0x0800226f
 8002200:	0800226f 	.word	0x0800226f
 8002204:	0800221d 	.word	0x0800221d
 8002208:	08002231 	.word	0x08002231
 800220c:	4a82      	ldr	r2, [pc, #520]	; (8002418 <HAL_GPIO_Init+0x2d8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d013      	beq.n	800223a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002212:	e02c      	b.n	800226e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	623b      	str	r3, [r7, #32]
          break;
 800221a:	e029      	b.n	8002270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	3304      	adds	r3, #4
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e024      	b.n	8002270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	3308      	adds	r3, #8
 800222c:	623b      	str	r3, [r7, #32]
          break;
 800222e:	e01f      	b.n	8002270 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	330c      	adds	r3, #12
 8002236:	623b      	str	r3, [r7, #32]
          break;
 8002238:	e01a      	b.n	8002270 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d102      	bne.n	8002248 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002242:	2304      	movs	r3, #4
 8002244:	623b      	str	r3, [r7, #32]
          break;
 8002246:	e013      	b.n	8002270 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d105      	bne.n	800225c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002250:	2308      	movs	r3, #8
 8002252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69fa      	ldr	r2, [r7, #28]
 8002258:	611a      	str	r2, [r3, #16]
          break;
 800225a:	e009      	b.n	8002270 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800225c:	2308      	movs	r3, #8
 800225e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	615a      	str	r2, [r3, #20]
          break;
 8002266:	e003      	b.n	8002270 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
          break;
 800226c:	e000      	b.n	8002270 <HAL_GPIO_Init+0x130>
          break;
 800226e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2bff      	cmp	r3, #255	; 0xff
 8002274:	d801      	bhi.n	800227a <HAL_GPIO_Init+0x13a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	e001      	b.n	800227e <HAL_GPIO_Init+0x13e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3304      	adds	r3, #4
 800227e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	2bff      	cmp	r3, #255	; 0xff
 8002284:	d802      	bhi.n	800228c <HAL_GPIO_Init+0x14c>
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	e002      	b.n	8002292 <HAL_GPIO_Init+0x152>
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	3b08      	subs	r3, #8
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	210f      	movs	r1, #15
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	401a      	ands	r2, r3
 80022a4:	6a39      	ldr	r1, [r7, #32]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	431a      	orrs	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 8090 	beq.w	80023e0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022c0:	4b56      	ldr	r3, [pc, #344]	; (800241c <HAL_GPIO_Init+0x2dc>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	4a55      	ldr	r2, [pc, #340]	; (800241c <HAL_GPIO_Init+0x2dc>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6193      	str	r3, [r2, #24]
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_GPIO_Init+0x2dc>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022d8:	4a51      	ldr	r2, [pc, #324]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a49      	ldr	r2, [pc, #292]	; (8002424 <HAL_GPIO_Init+0x2e4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00d      	beq.n	8002320 <HAL_GPIO_Init+0x1e0>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a48      	ldr	r2, [pc, #288]	; (8002428 <HAL_GPIO_Init+0x2e8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <HAL_GPIO_Init+0x1dc>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a47      	ldr	r2, [pc, #284]	; (800242c <HAL_GPIO_Init+0x2ec>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d101      	bne.n	8002318 <HAL_GPIO_Init+0x1d8>
 8002314:	2302      	movs	r3, #2
 8002316:	e004      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 8002318:	2303      	movs	r3, #3
 800231a:	e002      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 800231c:	2301      	movs	r3, #1
 800231e:	e000      	b.n	8002322 <HAL_GPIO_Init+0x1e2>
 8002320:	2300      	movs	r3, #0
 8002322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002324:	f002 0203 	and.w	r2, r2, #3
 8002328:	0092      	lsls	r2, r2, #2
 800232a:	4093      	lsls	r3, r2
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	4313      	orrs	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002332:	493b      	ldr	r1, [pc, #236]	; (8002420 <HAL_GPIO_Init+0x2e0>)
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	089b      	lsrs	r3, r3, #2
 8002338:	3302      	adds	r3, #2
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d006      	beq.n	800235a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800234c:	4b38      	ldr	r3, [pc, #224]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4937      	ldr	r1, [pc, #220]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800235a:	4b35      	ldr	r3, [pc, #212]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	43db      	mvns	r3, r3
 8002362:	4933      	ldr	r1, [pc, #204]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 8002364:	4013      	ands	r3, r2
 8002366:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002374:	4b2e      	ldr	r3, [pc, #184]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	492d      	ldr	r1, [pc, #180]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
 8002380:	e006      	b.n	8002390 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002382:	4b2b      	ldr	r3, [pc, #172]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	43db      	mvns	r3, r3
 800238a:	4929      	ldr	r1, [pc, #164]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 800238c:	4013      	ands	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d006      	beq.n	80023aa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800239c:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	4923      	ldr	r1, [pc, #140]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]
 80023a8:	e006      	b.n	80023b8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023aa:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	491f      	ldr	r1, [pc, #124]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4919      	ldr	r1, [pc, #100]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60cb      	str	r3, [r1, #12]
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	43db      	mvns	r3, r3
 80023da:	4915      	ldr	r1, [pc, #84]	; (8002430 <HAL_GPIO_Init+0x2f0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	3301      	adds	r3, #1
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f47f aeaf 	bne.w	8002154 <HAL_GPIO_Init+0x14>
  }
}
 80023f6:	bf00      	nop
 80023f8:	bf00      	nop
 80023fa:	372c      	adds	r7, #44	; 0x2c
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	10320000 	.word	0x10320000
 8002408:	10310000 	.word	0x10310000
 800240c:	10220000 	.word	0x10220000
 8002410:	10210000 	.word	0x10210000
 8002414:	10120000 	.word	0x10120000
 8002418:	10110000 	.word	0x10110000
 800241c:	40021000 	.word	0x40021000
 8002420:	40010000 	.word	0x40010000
 8002424:	40010800 	.word	0x40010800
 8002428:	40010c00 	.word	0x40010c00
 800242c:	40011000 	.word	0x40011000
 8002430:	40010400 	.word	0x40010400

08002434 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	887b      	ldrh	r3, [r7, #2]
 8002446:	4013      	ands	r3, r2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d002      	beq.n	8002452 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800244c:	2301      	movs	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	e001      	b.n	8002456 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002456:	7bfb      	ldrb	r3, [r7, #15]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3714      	adds	r7, #20
 800245c:	46bd      	mov	sp, r7
 800245e:	bc80      	pop	{r7}
 8002460:	4770      	bx	lr

08002462 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	807b      	strh	r3, [r7, #2]
 800246e:	4613      	mov	r3, r2
 8002470:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002472:	787b      	ldrb	r3, [r7, #1]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002478:	887a      	ldrh	r2, [r7, #2]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800247e:	e003      	b.n	8002488 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002480:	887b      	ldrh	r3, [r7, #2]
 8002482:	041a      	lsls	r2, r3, #16
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	611a      	str	r2, [r3, #16]
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002492:	b480      	push	{r7}
 8002494:	b085      	sub	sp, #20
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a4:	887a      	ldrh	r2, [r7, #2]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4013      	ands	r3, r2
 80024aa:	041a      	lsls	r2, r3, #16
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	43d9      	mvns	r1, r3
 80024b0:	887b      	ldrh	r3, [r7, #2]
 80024b2:	400b      	ands	r3, r1
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	611a      	str	r2, [r3, #16]
}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e26c      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f000 8087 	beq.w	80025f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e4:	4b92      	ldr	r3, [pc, #584]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d00c      	beq.n	800250a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024f0:	4b8f      	ldr	r3, [pc, #572]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 030c 	and.w	r3, r3, #12
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d112      	bne.n	8002522 <HAL_RCC_OscConfig+0x5e>
 80024fc:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002508:	d10b      	bne.n	8002522 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d06c      	beq.n	80025f0 <HAL_RCC_OscConfig+0x12c>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d168      	bne.n	80025f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e246      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x76>
 800252c:	4b80      	ldr	r3, [pc, #512]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a7f      	ldr	r2, [pc, #508]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	e02e      	b.n	8002598 <HAL_RCC_OscConfig+0xd4>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x98>
 8002542:	4b7b      	ldr	r3, [pc, #492]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a7a      	ldr	r2, [pc, #488]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b78      	ldr	r3, [pc, #480]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a77      	ldr	r2, [pc, #476]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002554:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e01d      	b.n	8002598 <HAL_RCC_OscConfig+0xd4>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002564:	d10c      	bne.n	8002580 <HAL_RCC_OscConfig+0xbc>
 8002566:	4b72      	ldr	r3, [pc, #456]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a71      	ldr	r2, [pc, #452]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a6e      	ldr	r2, [pc, #440]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e00b      	b.n	8002598 <HAL_RCC_OscConfig+0xd4>
 8002580:	4b6b      	ldr	r3, [pc, #428]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a6a      	ldr	r2, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	4b68      	ldr	r3, [pc, #416]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a67      	ldr	r2, [pc, #412]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002596:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d013      	beq.n	80025c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a0:	f7ff fcb6 	bl	8001f10 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a8:	f7ff fcb2 	bl	8001f10 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b64      	cmp	r3, #100	; 0x64
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e1fa      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0xe4>
 80025c6:	e014      	b.n	80025f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c8:	f7ff fca2 	bl	8001f10 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff fc9e 	bl	8001f10 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1e6      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e2:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d1f0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x10c>
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d063      	beq.n	80026c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025fe:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00b      	beq.n	8002622 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800260a:	4b49      	ldr	r3, [pc, #292]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b08      	cmp	r3, #8
 8002614:	d11c      	bne.n	8002650 <HAL_RCC_OscConfig+0x18c>
 8002616:	4b46      	ldr	r3, [pc, #280]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d116      	bne.n	8002650 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002622:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d005      	beq.n	800263a <HAL_RCC_OscConfig+0x176>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d001      	beq.n	800263a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e1ba      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4939      	ldr	r1, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800264a:	4313      	orrs	r3, r2
 800264c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264e:	e03a      	b.n	80026c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002658:	4b36      	ldr	r3, [pc, #216]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7ff fc57 	bl	8001f10 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002666:	f7ff fc53 	bl	8001f10 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e19b      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002678:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002684:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	00db      	lsls	r3, r3, #3
 8002692:	4927      	ldr	r1, [pc, #156]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	600b      	str	r3, [r1, #0]
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800269a:	4b26      	ldr	r3, [pc, #152]	; (8002734 <HAL_RCC_OscConfig+0x270>)
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7ff fc36 	bl	8001f10 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026a8:	f7ff fc32 	bl	8001f10 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e17a      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 0308 	and.w	r3, r3, #8
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03a      	beq.n	8002748 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d019      	beq.n	800270e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <HAL_RCC_OscConfig+0x274>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e0:	f7ff fc16 	bl	8001f10 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e8:	f7ff fc12 	bl	8001f10 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e15a      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fa:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002706:	2001      	movs	r0, #1
 8002708:	f000 faa6 	bl	8002c58 <RCC_Delay>
 800270c:	e01c      	b.n	8002748 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_OscConfig+0x274>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002714:	f7ff fbfc 	bl	8001f10 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800271a:	e00f      	b.n	800273c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800271c:	f7ff fbf8 	bl	8001f10 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d908      	bls.n	800273c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e140      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
 800272e:	bf00      	nop
 8002730:	40021000 	.word	0x40021000
 8002734:	42420000 	.word	0x42420000
 8002738:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	4b9e      	ldr	r3, [pc, #632]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e9      	bne.n	800271c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80a6 	beq.w	80028a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002756:	2300      	movs	r3, #0
 8002758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275a:	4b97      	ldr	r3, [pc, #604]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10d      	bne.n	8002782 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b94      	ldr	r3, [pc, #592]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4a93      	ldr	r2, [pc, #588]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	61d3      	str	r3, [r2, #28]
 8002772:	4b91      	ldr	r3, [pc, #580]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277e:	2301      	movs	r3, #1
 8002780:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002782:	4b8e      	ldr	r3, [pc, #568]	; (80029bc <HAL_RCC_OscConfig+0x4f8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d118      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800278e:	4b8b      	ldr	r3, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x4f8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a8a      	ldr	r2, [pc, #552]	; (80029bc <HAL_RCC_OscConfig+0x4f8>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279a:	f7ff fbb9 	bl	8001f10 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a2:	f7ff fbb5 	bl	8001f10 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b64      	cmp	r3, #100	; 0x64
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0fd      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	4b81      	ldr	r3, [pc, #516]	; (80029bc <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x312>
 80027c8:	4b7b      	ldr	r3, [pc, #492]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	4a7a      	ldr	r2, [pc, #488]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6213      	str	r3, [r2, #32]
 80027d4:	e02d      	b.n	8002832 <HAL_RCC_OscConfig+0x36e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x334>
 80027de:	4b76      	ldr	r3, [pc, #472]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a75      	ldr	r2, [pc, #468]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6213      	str	r3, [r2, #32]
 80027ea:	4b73      	ldr	r3, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	4a72      	ldr	r2, [pc, #456]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	f023 0304 	bic.w	r3, r3, #4
 80027f4:	6213      	str	r3, [r2, #32]
 80027f6:	e01c      	b.n	8002832 <HAL_RCC_OscConfig+0x36e>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	2b05      	cmp	r3, #5
 80027fe:	d10c      	bne.n	800281a <HAL_RCC_OscConfig+0x356>
 8002800:	4b6d      	ldr	r3, [pc, #436]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4a6c      	ldr	r2, [pc, #432]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002806:	f043 0304 	orr.w	r3, r3, #4
 800280a:	6213      	str	r3, [r2, #32]
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a69      	ldr	r2, [pc, #420]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002812:	f043 0301 	orr.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	e00b      	b.n	8002832 <HAL_RCC_OscConfig+0x36e>
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a66      	ldr	r2, [pc, #408]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002820:	f023 0301 	bic.w	r3, r3, #1
 8002824:	6213      	str	r3, [r2, #32]
 8002826:	4b64      	ldr	r3, [pc, #400]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a63      	ldr	r2, [pc, #396]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d015      	beq.n	8002866 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800283a:	f7ff fb69 	bl	8001f10 <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	e00a      	b.n	8002858 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002842:	f7ff fb65 	bl	8001f10 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002850:	4293      	cmp	r3, r2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0ab      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	4b57      	ldr	r3, [pc, #348]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0ee      	beq.n	8002842 <HAL_RCC_OscConfig+0x37e>
 8002864:	e014      	b.n	8002890 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002866:	f7ff fb53 	bl	8001f10 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7ff fb4f 	bl	8001f10 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e095      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1ee      	bne.n	800286e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002896:	4b48      	ldr	r3, [pc, #288]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a47      	ldr	r2, [pc, #284]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 8081 	beq.w	80029ae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028ac:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d061      	beq.n	800297c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d146      	bne.n	800294e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c0:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <HAL_RCC_OscConfig+0x4fc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7ff fb23 	bl	8001f10 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ce:	f7ff fb1f 	bl	8001f10 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e067      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e0:	4b35      	ldr	r3, [pc, #212]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d108      	bne.n	8002908 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028f6:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	492d      	ldr	r1, [pc, #180]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002908:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a19      	ldr	r1, [r3, #32]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002918:	430b      	orrs	r3, r1
 800291a:	4927      	ldr	r1, [pc, #156]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <HAL_RCC_OscConfig+0x4fc>)
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002926:	f7ff faf3 	bl	8001f10 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292e:	f7ff faef 	bl	8001f10 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e037      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0f0      	beq.n	800292e <HAL_RCC_OscConfig+0x46a>
 800294c:	e02f      	b.n	80029ae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294e:	4b1c      	ldr	r3, [pc, #112]	; (80029c0 <HAL_RCC_OscConfig+0x4fc>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7ff fadc 	bl	8001f10 <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295c:	f7ff fad8 	bl	8001f10 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e020      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1f0      	bne.n	800295c <HAL_RCC_OscConfig+0x498>
 800297a:	e018      	b.n	80029ae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e013      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_OscConfig+0x4f4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	429a      	cmp	r2, r3
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40007000 	.word	0x40007000
 80029c0:	42420060 	.word	0x42420060

080029c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0d0      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d8:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d910      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e6:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 0207 	bic.w	r2, r3, #7
 80029ee:	4965      	ldr	r1, [pc, #404]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b63      	ldr	r3, [pc, #396]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b8      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a38:	4b53      	ldr	r3, [pc, #332]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b50      	ldr	r3, [pc, #320]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	494d      	ldr	r1, [pc, #308]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d040      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d115      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a82:	4b41      	ldr	r3, [pc, #260]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e073      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e06b      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b39      	ldr	r3, [pc, #228]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4936      	ldr	r1, [pc, #216]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ab4:	f7ff fa2c 	bl	8001f10 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7ff fa28 	bl	8001f10 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e053      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b2d      	ldr	r3, [pc, #180]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b27      	ldr	r3, [pc, #156]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d210      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4922      	ldr	r1, [pc, #136]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b19      	ldr	r3, [pc, #100]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4916      	ldr	r1, [pc, #88]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	490e      	ldr	r1, [pc, #56]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b52:	f000 f821 	bl	8002b98 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	490a      	ldr	r1, [pc, #40]	; (8002b8c <HAL_RCC_ClockConfig+0x1c8>)
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <HAL_RCC_ClockConfig+0x1cc>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1d0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f98a 	bl	8001e8c <HAL_InitTick>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40022000 	.word	0x40022000
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	080034dc 	.word	0x080034dc
 8002b90:	20000060 	.word	0x20000060
 8002b94:	20000064 	.word	0x20000064

08002b98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b98:	b490      	push	{r4, r7}
 8002b9a:	b08a      	sub	sp, #40	; 0x28
 8002b9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ba0:	1d3c      	adds	r4, r7, #4
 8002ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002ba8:	f240 2301 	movw	r3, #513	; 0x201
 8002bac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc2:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x46>
 8002bd6:	e02d      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bda:	623b      	str	r3, [r7, #32]
      break;
 8002bdc:	e02d      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002bea:	4413      	add	r3, r2
 8002bec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002bf0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d013      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bfc:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	0c5b      	lsrs	r3, r3, #17
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002c10:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	4a0e      	ldr	r2, [pc, #56]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c16:	fb02 f203 	mul.w	r2, r2, r3
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
 8002c22:	e004      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4a0b      	ldr	r2, [pc, #44]	; (8002c54 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	623b      	str	r3, [r7, #32]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b06      	ldr	r3, [pc, #24]	; (8002c50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c36:	623b      	str	r3, [r7, #32]
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3728      	adds	r7, #40	; 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc90      	pop	{r4, r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	080034cc 	.word	0x080034cc
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	007a1200 	.word	0x007a1200
 8002c54:	003d0900 	.word	0x003d0900

08002c58 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <RCC_Delay+0x34>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <RCC_Delay+0x38>)
 8002c66:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6a:	0a5b      	lsrs	r3, r3, #9
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c74:	bf00      	nop
  }
  while (Delay --);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1e5a      	subs	r2, r3, #1
 8002c7a:	60fa      	str	r2, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f9      	bne.n	8002c74 <RCC_Delay+0x1c>
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr
 8002c8c:	20000060 	.word	0x20000060
 8002c90:	10624dd3 	.word	0x10624dd3

08002c94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e041      	b.n	8002d2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff f84e 	bl	8001d5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	f000 fa6a 	bl	80031ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b085      	sub	sp, #20
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d001      	beq.n	8002d4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e035      	b.n	8002db8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68da      	ldr	r2, [r3, #12]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <HAL_TIM_Base_Start_IT+0x90>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x4e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d76:	d004      	beq.n	8002d82 <HAL_TIM_Base_Start_IT+0x4e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <HAL_TIM_Base_Start_IT+0x94>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d111      	bne.n	8002da6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b06      	cmp	r3, #6
 8002d92:	d010      	beq.n	8002db6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da4:	e007      	b.n	8002db6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f042 0201 	orr.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	40000400 	.word	0x40000400

08002dcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691b      	ldr	r3, [r3, #16]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d122      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d11b      	bne.n	8002e28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f06f 0202 	mvn.w	r2, #2
 8002df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f9b1 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002e14:	e005      	b.n	8002e22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f9a4 	bl	8003164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f9b3 	bl	8003188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d122      	bne.n	8002e7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d11b      	bne.n	8002e7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0204 	mvn.w	r2, #4
 8002e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2202      	movs	r2, #2
 8002e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f987 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f97a 	bl	8003164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f989 	bl	8003188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0308 	and.w	r3, r3, #8
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d122      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d11b      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0208 	mvn.w	r2, #8
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2204      	movs	r2, #4
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f95d 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f950 	bl	8003164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f95f 	bl	8003188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b10      	cmp	r3, #16
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0210 	mvn.w	r2, #16
 8002ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2208      	movs	r2, #8
 8002efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f933 	bl	8003176 <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f926 	bl	8003164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f935 	bl	8003188 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0301 	and.w	r3, r3, #1
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d10e      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0201 	mvn.w	r2, #1
 8002f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7fe fa66 	bl	800141c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f5a:	2b80      	cmp	r3, #128	; 0x80
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	2b80      	cmp	r3, #128	; 0x80
 8002f6a:	d107      	bne.n	8002f7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fa67 	bl	800344a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b40      	cmp	r3, #64	; 0x40
 8002f88:	d10e      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b40      	cmp	r3, #64	; 0x40
 8002f96:	d107      	bne.n	8002fa8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f8f9 	bl	800319a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d10e      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b20      	cmp	r3, #32
 8002fc2:	d107      	bne.n	8002fd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f06f 0220 	mvn.w	r2, #32
 8002fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fa32 	bl	8003438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_TIM_ConfigClockSource+0x18>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e0b3      	b.n	800315c <HAL_TIM_ConfigClockSource+0x180>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003012:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800301a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302c:	d03e      	beq.n	80030ac <HAL_TIM_ConfigClockSource+0xd0>
 800302e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003032:	f200 8087 	bhi.w	8003144 <HAL_TIM_ConfigClockSource+0x168>
 8003036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303a:	f000 8085 	beq.w	8003148 <HAL_TIM_ConfigClockSource+0x16c>
 800303e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003042:	d87f      	bhi.n	8003144 <HAL_TIM_ConfigClockSource+0x168>
 8003044:	2b70      	cmp	r3, #112	; 0x70
 8003046:	d01a      	beq.n	800307e <HAL_TIM_ConfigClockSource+0xa2>
 8003048:	2b70      	cmp	r3, #112	; 0x70
 800304a:	d87b      	bhi.n	8003144 <HAL_TIM_ConfigClockSource+0x168>
 800304c:	2b60      	cmp	r3, #96	; 0x60
 800304e:	d050      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x116>
 8003050:	2b60      	cmp	r3, #96	; 0x60
 8003052:	d877      	bhi.n	8003144 <HAL_TIM_ConfigClockSource+0x168>
 8003054:	2b50      	cmp	r3, #80	; 0x50
 8003056:	d03c      	beq.n	80030d2 <HAL_TIM_ConfigClockSource+0xf6>
 8003058:	2b50      	cmp	r3, #80	; 0x50
 800305a:	d873      	bhi.n	8003144 <HAL_TIM_ConfigClockSource+0x168>
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d058      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0x136>
 8003060:	2b40      	cmp	r3, #64	; 0x40
 8003062:	d86f      	bhi.n	8003144 <HAL_TIM_ConfigClockSource+0x168>
 8003064:	2b30      	cmp	r3, #48	; 0x30
 8003066:	d064      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0x156>
 8003068:	2b30      	cmp	r3, #48	; 0x30
 800306a:	d86b      	bhi.n	8003144 <HAL_TIM_ConfigClockSource+0x168>
 800306c:	2b20      	cmp	r3, #32
 800306e:	d060      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0x156>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d867      	bhi.n	8003144 <HAL_TIM_ConfigClockSource+0x168>
 8003074:	2b00      	cmp	r3, #0
 8003076:	d05c      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0x156>
 8003078:	2b10      	cmp	r3, #16
 800307a:	d05a      	beq.n	8003132 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800307c:	e062      	b.n	8003144 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	6899      	ldr	r1, [r3, #8]
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f000 f95c 	bl	800334a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	609a      	str	r2, [r3, #8]
      break;
 80030aa:	e04e      	b.n	800314a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f000 f945 	bl	800334a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ce:	609a      	str	r2, [r3, #8]
      break;
 80030d0:	e03b      	b.n	800314a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6818      	ldr	r0, [r3, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	461a      	mov	r2, r3
 80030e0:	f000 f8bc 	bl	800325c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2150      	movs	r1, #80	; 0x50
 80030ea:	4618      	mov	r0, r3
 80030ec:	f000 f913 	bl	8003316 <TIM_ITRx_SetConfig>
      break;
 80030f0:	e02b      	b.n	800314a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	6859      	ldr	r1, [r3, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	461a      	mov	r2, r3
 8003100:	f000 f8da 	bl	80032b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2160      	movs	r1, #96	; 0x60
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f903 	bl	8003316 <TIM_ITRx_SetConfig>
      break;
 8003110:	e01b      	b.n	800314a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	461a      	mov	r2, r3
 8003120:	f000 f89c 	bl	800325c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2140      	movs	r1, #64	; 0x40
 800312a:	4618      	mov	r0, r3
 800312c:	f000 f8f3 	bl	8003316 <TIM_ITRx_SetConfig>
      break;
 8003130:	e00b      	b.n	800314a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4619      	mov	r1, r3
 800313c:	4610      	mov	r0, r2
 800313e:	f000 f8ea 	bl	8003316 <TIM_ITRx_SetConfig>
        break;
 8003142:	e002      	b.n	800314a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003144:	bf00      	nop
 8003146:	e000      	b.n	800314a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003148:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3710      	adds	r7, #16
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr

08003188 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	bc80      	pop	{r7}
 8003198:	4770      	bx	lr

0800319a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a25      	ldr	r2, [pc, #148]	; (8003254 <TIM_Base_SetConfig+0xa8>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d007      	beq.n	80031d4 <TIM_Base_SetConfig+0x28>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ca:	d003      	beq.n	80031d4 <TIM_Base_SetConfig+0x28>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a22      	ldr	r2, [pc, #136]	; (8003258 <TIM_Base_SetConfig+0xac>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d108      	bne.n	80031e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <TIM_Base_SetConfig+0xa8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0x52>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x52>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a17      	ldr	r2, [pc, #92]	; (8003258 <TIM_Base_SetConfig+0xac>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <TIM_Base_SetConfig+0xa8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d103      	bne.n	8003244 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	615a      	str	r2, [r3, #20]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400

0800325c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0201 	bic.w	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f023 030a 	bic.w	r3, r3, #10
 8003298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	621a      	str	r2, [r3, #32]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f023 0210 	bic.w	r2, r3, #16
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	031b      	lsls	r3, r3, #12
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	621a      	str	r2, [r3, #32]
}
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003316:	b480      	push	{r7}
 8003318:	b085      	sub	sp, #20
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
 800331e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800332c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4313      	orrs	r3, r2
 8003334:	f043 0307 	orr.w	r3, r3, #7
 8003338:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	609a      	str	r2, [r3, #8]
}
 8003340:	bf00      	nop
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	bc80      	pop	{r7}
 8003348:	4770      	bx	lr

0800334a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800334a:	b480      	push	{r7}
 800334c:	b087      	sub	sp, #28
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003364:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	021a      	lsls	r2, r3, #8
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	431a      	orrs	r2, r3
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	4313      	orrs	r3, r2
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	609a      	str	r2, [r3, #8]
}
 800337e:	bf00      	nop
 8003380:	371c      	adds	r7, #28
 8003382:	46bd      	mov	sp, r7
 8003384:	bc80      	pop	{r7}
 8003386:	4770      	bx	lr

08003388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800339c:	2302      	movs	r3, #2
 800339e:	e041      	b.n	8003424 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a14      	ldr	r2, [pc, #80]	; (8003430 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ec:	d004      	beq.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a10      	ldr	r2, [pc, #64]	; (8003434 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d10c      	bne.n	8003412 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	4313      	orrs	r3, r2
 8003408:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3714      	adds	r7, #20
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40000400 	.word	0x40000400

08003438 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <__libc_init_array>:
 800345c:	b570      	push	{r4, r5, r6, lr}
 800345e:	2600      	movs	r6, #0
 8003460:	4d0c      	ldr	r5, [pc, #48]	; (8003494 <__libc_init_array+0x38>)
 8003462:	4c0d      	ldr	r4, [pc, #52]	; (8003498 <__libc_init_array+0x3c>)
 8003464:	1b64      	subs	r4, r4, r5
 8003466:	10a4      	asrs	r4, r4, #2
 8003468:	42a6      	cmp	r6, r4
 800346a:	d109      	bne.n	8003480 <__libc_init_array+0x24>
 800346c:	f000 f822 	bl	80034b4 <_init>
 8003470:	2600      	movs	r6, #0
 8003472:	4d0a      	ldr	r5, [pc, #40]	; (800349c <__libc_init_array+0x40>)
 8003474:	4c0a      	ldr	r4, [pc, #40]	; (80034a0 <__libc_init_array+0x44>)
 8003476:	1b64      	subs	r4, r4, r5
 8003478:	10a4      	asrs	r4, r4, #2
 800347a:	42a6      	cmp	r6, r4
 800347c:	d105      	bne.n	800348a <__libc_init_array+0x2e>
 800347e:	bd70      	pop	{r4, r5, r6, pc}
 8003480:	f855 3b04 	ldr.w	r3, [r5], #4
 8003484:	4798      	blx	r3
 8003486:	3601      	adds	r6, #1
 8003488:	e7ee      	b.n	8003468 <__libc_init_array+0xc>
 800348a:	f855 3b04 	ldr.w	r3, [r5], #4
 800348e:	4798      	blx	r3
 8003490:	3601      	adds	r6, #1
 8003492:	e7f2      	b.n	800347a <__libc_init_array+0x1e>
 8003494:	080034ec 	.word	0x080034ec
 8003498:	080034ec 	.word	0x080034ec
 800349c:	080034ec 	.word	0x080034ec
 80034a0:	080034f0 	.word	0x080034f0

080034a4 <memset>:
 80034a4:	4603      	mov	r3, r0
 80034a6:	4402      	add	r2, r0
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d100      	bne.n	80034ae <memset+0xa>
 80034ac:	4770      	bx	lr
 80034ae:	f803 1b01 	strb.w	r1, [r3], #1
 80034b2:	e7f9      	b.n	80034a8 <memset+0x4>

080034b4 <_init>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr

080034c0 <_fini>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr
